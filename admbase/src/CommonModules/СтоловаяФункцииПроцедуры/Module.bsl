////////////////////////////////////////////////////////////////////////////////
// <Заголовок модуля: краткое описание и условия применения модуля.>
//  
////////////////////////////////////////////////////////////////////////////////


#Область ПрограммныйИнтерфейс


Процедура ЗаполнитьВесЕдиницыИзмерения(Коллекция) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Товары",Коллекция.Выгрузить());
	Запрос.Текст = "ВЫБРАТЬ
	|	Товары.НомерСтроки - 1 КАК Индекс,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ Товары
	|ИЗ
	|	&Товары КАК Товары
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.Индекс КАК Индекс,
	|	ЕдиницыИзмерения.Вес КАК ВесЕдиницы
	|ИЗ
	|	Товары КАК Товары
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО Товары.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Коллекция[Выборка.Индекс].ВесЕдиницы = Выборка.ВесЕдиницы;
	КонецЦикла;


КонецПроцедуры

Процедура РассчетВесаНоменклатуры(Идентификатор,Объект,ИмяТаблицы) Экспорт 
	
	СтрокаТаблицы = Объект[ИмяТаблицы].НайтиПоИдентификатору(Идентификатор);
	
	Если СтрокаТаблицы = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если СтрокаТаблицы.Номенклатура.Пустая() Тогда
		СтрокаТаблицы.ВесЕдиницы = 0;
		СтрокаТаблицы.Вес 		 = 0;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Номенклатура",		СтрокаТаблицы.Номенклатура);
	Запрос.УстановитьПараметр("ЕдиницаИзмерения",	СтрокаТаблицы.ЕдиницаИзмерения);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА &ЕдиницаИзмерения = ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка)
	|			ТОГДА Номенклатура.ЕдиницаИзмерения
	|		ИНАЧЕ &ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ ОпределениеЕдиницы
	|ИЗ
	|	Справочник.Номенклатура КАК Номенклатура
	|ГДЕ
	|	Номенклатура.Ссылка = &Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕдиницыИзмерения.Вес КАК Вес,
	|	ЕдиницыИзмерения.Ссылка КАК ЕдиницаИзмерения
	|ИЗ
	|	ОпределениеЕдиницы КАК ОпределениеЕдиницы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЕдиницыИзмерения КАК ЕдиницыИзмерения
	|		ПО ОпределениеЕдиницы.ЕдиницаИзмерения = ЕдиницыИзмерения.Ссылка";
	
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	СтрокаТаблицы.ЕдиницаИзмерения 	= Выборка.ЕдиницаИзмерения;
	СтрокаТаблицы.ВесЕдиницы 		= Выборка.Вес; 
	
	СтрокаТаблицы.Вес = СтрокаТаблицы.ВесЕдиницы * СтрокаТаблицы.Количество;

КонецПроцедуры // РассчетВесаНоменклатуры()

Функция ПолучитьТаблицуPERCo(ИсходныеДанныеФормыКоллекция) Экспорт

	ИсходнаяТаблица = ИсходныеДанныеФормыКоллекция.Выгрузить();
	СправочникиЗагрузкаИзВнешнихИсточниковПолныеПрава.ЗагрузкаСправочникаСотрудникиПоПолю(ИсходнаяТаблица);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ТаблицаЗначений",ИсходнаяТаблица);
	
#Область ТекстЗапроса
	
Запрос.Текст = "ВЫБРАТЬ
|	ТаблицаЗначений.ФИОСотрудника КАК Наименование,
|	ТаблицаЗначений.Сотрудник КАК Сотрудник,
|	ТаблицаЗначений.Дата КАК Дата,
|	ТаблицаЗначений.Время КАК Время
|ПОМЕСТИТЬ ТаблицаЗначений
|ИЗ
|	&ТаблицаЗначений КАК ТаблицаЗначений
|
|ИНДЕКСИРОВАТЬ ПО
|	Наименование
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
|	ТаблицаНаименования.Наименование КАК Наименование,
|	ТаблицаНаименования.Владелец КАК Ссылка
|ПОМЕСТИТЬ СправочникСотрудники
|ИЗ
|	Справочник.ЗагружаемыеФИОСотрудников КАК ТаблицаНаименования
|ГДЕ
|	ТаблицаНаименования.Наименование В
|			(ВЫБРАТЬ
|				ТаблицаЗначений.Наименование КАК Наименование
|			ИЗ
|				ТаблицаЗначений КАК ТаблицаЗначений)
|	И ТаблицаНаименования.ПометкаУдаления = ЛОЖЬ
|
|ИНДЕКСИРОВАТЬ ПО
|	Наименование
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	РасписаниеРаботыСтоловой.ВидСтола КАК ВидСтола,
|	РасписаниеРаботыСтоловой.ВремяНачала КАК ВремяНачала,
|	РасписаниеРаботыСтоловой.ВремяОкончания КАК ВремяОкончания
|ПОМЕСТИТЬ РасписаниеСтоловой
|ИЗ
|	РегистрСведений.РасписаниеРаботыСтоловой КАК РасписаниеРаботыСтоловой
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	СправочникСотрудники.Ссылка КАК Сотрудник,
|	ВЫБОР
|		КОГДА ТаблицаЗначений.Время >= ДАТАВРЕМЯ(1, 1, 1, 23, 0, 0)
|				И ТаблицаЗначений.Время <= ДАТАВРЕМЯ(1, 1, 1, 23, 59, 59)
|			ТОГДА ДОБАВИТЬКДАТЕ(ТаблицаЗначений.Дата, ДЕНЬ, 1)
|		ИНАЧЕ ТаблицаЗначений.Дата
|	КОНЕЦ КАК Дата,
|	ВЫБОР
|		КОГДА ТаблицаЗначений.Время = ДАТАВРЕМЯ(1, 1, 1)
|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 1, 0)
|		ИНАЧЕ ТаблицаЗначений.Время
|	КОНЕЦ КАК Время,
|	ТаблицаЗначений.Наименование КАК Наименование,
|	ВЫБОР
|		КОГДА ТаблицаЗначений.Время >= РасписаниеСтоловой.ВремяНачала
|				И ТаблицаЗначений.Время <= РасписаниеСтоловой.ВремяОкончания
|			ТОГДА РасписаниеСтоловой.ВидСтола
|		КОГДА (ТаблицаЗначений.Время >= РасписаниеСтоловой.ВремяНачала
|					И ТаблицаЗначений.Время <= ДАТАВРЕМЯ(1, 1, 1, 23, 59, 59)
|				ИЛИ ТаблицаЗначений.Время >= ДАТАВРЕМЯ(1, 1, 1)
|					И ТаблицаЗначений.Время <= РасписаниеСтоловой.ВремяОкончания)
|				И РасписаниеСтоловой.ВремяНачала > РасписаниеСтоловой.ВремяОкончания
|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСтолов.ОбедНочь)
|		ИНАЧЕ НЕОПРЕДЕЛЕНО
|	КОНЕЦ КАК ВидСтола
|ПОМЕСТИТЬ Предварительная
|ИЗ
|	ТаблицаЗначений КАК ТаблицаЗначений
|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СправочникСотрудники КАК СправочникСотрудники
|		ПО ТаблицаЗначений.Наименование = СправочникСотрудники.Наименование
|		ЛЕВОЕ СОЕДИНЕНИЕ РасписаниеСтоловой КАК РасписаниеСтоловой
|		ПО (ИСТИНА)
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	Предварительная.Сотрудник КАК Сотрудник,
|	Предварительная.Дата КАК Дата,
|	Предварительная.Время КАК Время,
|	Предварительная.Наименование КАК Наименование,
|	Предварительная.ВидСтола КАК ВидСтола
|ПОМЕСТИТЬ НайденныеПоВремениВидыСтолов
|ИЗ
|	Предварительная КАК Предварительная
|ГДЕ
|	НЕ Предварительная.ВидСтола = НЕОПРЕДЕЛЕНО
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	Предварительная.Сотрудник КАК Сотрудник,
|	Предварительная.Дата КАК Дата,
|	Предварительная.Время КАК Время,
|	Предварительная.Наименование КАК Наименование,
|	Предварительная.ВидСтола КАК ВидСтола
|ПОМЕСТИТЬ ВнеРасписания
|ИЗ
|	Предварительная КАК Предварительная
|		ЛЕВОЕ СОЕДИНЕНИЕ НайденныеПоВремениВидыСтолов КАК НайденныеПоВремениВидыСтолов
|		ПО Предварительная.Сотрудник = НайденныеПоВремениВидыСтолов.Сотрудник
|			И Предварительная.Дата = НайденныеПоВремениВидыСтолов.Дата
|			И Предварительная.Время = НайденныеПоВремениВидыСтолов.Время
|			И (Предварительная.ВидСтола = НЕОПРЕДЕЛЕНО)
|ГДЕ
|	НайденныеПоВремениВидыСтолов.Сотрудник ЕСТЬ NULL
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	НайденныеПоВремениВидыСтолов.Сотрудник КАК Сотрудник,
|	НайденныеПоВремениВидыСтолов.Дата КАК Дата,
|	НайденныеПоВремениВидыСтолов.Время КАК УчтенноеВремя,
|	НайденныеПоВремениВидыСтолов.Наименование КАК Наименование,
|	НайденныеПоВремениВидыСтолов.ВидСтола КАК ВидСтола
|ПОМЕСТИТЬ ОбщаяТаблица
|ИЗ
|	НайденныеПоВремениВидыСтолов КАК НайденныеПоВремениВидыСтолов
|
|ОБЪЕДИНИТЬ ВСЕ
|
|ВЫБРАТЬ
|	ВнеРасписания.Сотрудник,
|	ВнеРасписания.Дата,
|	ВнеРасписания.Время,
|	ВнеРасписания.Наименование,
|	ВнеРасписания.ВидСтола
|ИЗ
|	ВнеРасписания КАК ВнеРасписания
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ОбщаяТаблица.Сотрудник КАК Сотрудник,
|	ОбщаяТаблица.Дата КАК Дата,
|	МАКСИМУМ(ОбщаяТаблица.УчтенноеВремя) КАК УчтенноеВремя,
|	ОбщаяТаблица.Наименование КАК Наименование,
|	ОбщаяТаблица.ВидСтола КАК ВидСтола
|ИЗ
|	ОбщаяТаблица КАК ОбщаяТаблица
|
|СГРУППИРОВАТЬ ПО
|	ОбщаяТаблица.Сотрудник,
|	ОбщаяТаблица.Дата,
|	ОбщаяТаблица.Наименование,
|	ОбщаяТаблица.ВидСтола
|
|УПОРЯДОЧИТЬ ПО
|	Наименование,
|	Дата,
|	ОбщаяТаблица.ВидСтола.Порядок";
	
#КонецОбласти
	
	Возврат Запрос.Выполнить().Выгрузить();

КонецФункции

Процедура ЗаписатьПоказателиРаботыСтоловой(СтруктураПоказателей) Экспорт 
	
	СтруктураПоказателей.Вставить("Период",				НачалоМесяца(СтруктураПоказателей.ПериодРегистрации));
	СтруктураПоказателей.Вставить("ПериодРегистрации",	НачалоМесяца(СтруктураПоказателей.ПериодРегистрации));
	
	НаборЗаписей =	РегистрыСведений.ПоказателиРаботыСтоловой.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(СтруктураПоказателей.ПериодРегистрации);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		НоваяЗапись = НаборЗаписей[0];
	Иначе
		НоваяЗапись = НаборЗаписей.Добавить();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(НоваяЗапись,СтруктураПоказателей);
	
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.Записать();

КонецПроцедуры

#КонецОбласти

