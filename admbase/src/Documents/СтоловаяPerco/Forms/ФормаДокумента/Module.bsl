#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Объект.Ссылка.Пустая() Тогда
		Объект.Ответственный = Пользователи.ТекущийПользователь();
	КонецЕсли;	
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗагрузитьДанные(Команда)
	
	ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогОткрытияФайла.Заголовок = "Выберите файл с данными PERCO";
	ДиалогОткрытияФайла.ПолноеИмяФайла = "";
	ДиалогОткрытияФайла.Фильтр = "Данные PERCO столовая (*.csv)|*.csv|"; // 
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеВыбораФайлаCSV",ЭтотОбъект,Новый Структура);
	ДиалогОткрытияФайла.Показать(ОписаниеОповещения);

КонецПроцедуры

// @skip-check module-structure-form-event-regions
// 
// Параметры:
//  ВыбранныеФайлы - Массив - Строка
//  ДополнительныеПараметры - Структура
//@skip-check doc-comment-collection-item-type
&НаКлиенте
Процедура ПослеВыбораФайлаCSV(ВыбранныеФайлы,ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат
	КонецЕсли; 
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	
	ДополнительныеПараметры.Вставить("ТекстовыйДокумент",ТекстовыйДокумент);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеНачалаЧтенияФайлаCSV",ЭтотОбъект,ДополнительныеПараметры);

	ТекстовыйДокумент.НачатьЧтение(ОписаниеОповещения,ВыбранныеФайлы[0],,Символы.ПС);
		
КонецПроцедуры // ПослеВыбораФайлаCSV()

// @skip-check module-structure-form-event-regions
// 
// Параметры:
//  ДополнительныеПараметры - Структура
&НаКлиенте
Процедура ПослеНачалаЧтенияФайлаCSV(ДополнительныеПараметры) Экспорт 

	ТаблицаЗагрузки.Очистить();

	ТекстовыйДокумент = ДополнительныеПараметры.ТекстовыйДокумент;
	МассивСтрок = Новый Массив;
	
	КоличествоСтрок = ТекстовыйДокумент.КоличествоСтрок();
	Счетчик = 1;
	Пока Счетчик <= КоличествоСтрок Цикл
		МассивСтрок.Добавить(СтрРазделить(ТекстовыйДокумент.ПолучитьСтроку(Счетчик), ";",Истина));	
		Счетчик = Счетчик +1;
	КонецЦикла; 
	
	Если МассивСтрок.Количество() = 0 Тогда
		Возврат
	КонецЕсли; 
		
	Для каждого ЭлементМассива Из МассивСтрок Цикл
		Если ЭлементМассива[11] = "Столовая" И Не ПустаяСтрока(ЭлементМассива[1]) Тогда
			СтрокаТаблицы = ТаблицаЗагрузки.Добавить();
			СтрокаТаблицы.ФИОСотрудника = ЭлементМассива[1];
			СтрокаТаблицы.Дата 			= ЗначениеДатыИзСтроки(ЭлементМассива[2]);
			СтрокаТаблицы.Время 		= ЗначениеВремяИзСтроки(ЭлементМассива[3]);
		КонецЕсли;
	КонецЦикла;
	МассивСтрок 	= Неопределено;
	ЭлементМассива 	= Неопределено;
	
	ЗаполнитьИсходныеДанныеИзТаблицыЗагрузки();
	
	Модифицированность = Истина;
	
КонецПроцедуры // ПослеНачалаЧтенияФайлаCSV()

&НаКлиенте
Процедура ЗагрузитьДанныеMXL(Команда)
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияФормыЗагрузки",ЭтотОбъект,Новый Структура);
	ОткрытьФорму("Документ.СтоловаяPerco.Форма.ФормаЗагрузкиPerco",,ЭтотОбъект,,,,ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	
КонецПроцедуры

// После закрытия формы загрузки.
// 
// Параметры:
//  Результат - Структура
//  ДополнитльныеПараметры - Структура
//@skip-check module-structure-form-event-regions
&НаКлиенте
Процедура ПослеЗакрытияФормыЗагрузки(Результат,ДополнитльныеПараметры) Экспорт 

	 Если Результат = Неопределено Тогда
	 	 Возврат
	 КонецЕсли;

	 ТаблицаЗагрузки.Очистить();

		
	Если Результат.Количество() = 0 Тогда
		Возврат
	КонецЕсли; 
		
	Для каждого ЭлементМассива Из Результат Цикл
		Если  Не ПустаяСтрока(ЭлементМассива.Помещение) Тогда
			СтрокаТаблицы = ТаблицаЗагрузки.Добавить();
			СтрокаТаблицы.ФИОСотрудника = ЭлементМассива.Сотрудник;
			СтрокаТаблицы.Дата 			= ЭлементМассива.Дата;
			СтрокаТаблицы.Время 		= ЭлементМассива.Время;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьИсходныеДанныеИзТаблицыЗагрузки();
	
	Модифицированность = Истина;

КонецПроцедуры // ПослеЗакрытияФормыЗагрузки()

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

//@skip-check module-structure-form-event-regions
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Функция ЗначениеДатыИзСтроки(Знач Текст)
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат '00010101'
	КонецЕсли;
	
	Число 	= Сред(Текст,1,2);
	Месяц 	= Сред(Текст,4,2);
	Год 	= Сред(Текст,7,4);
	
	Возврат  Дата(СтрШаблон("%1%2%3",Год,Месяц,Число));
	
КонецФункции // ЗначениеДатыИзСтроки()

&НаКлиенте
Функция ЗначениеВремяИзСтроки(Знач Текст)
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат '00010101'
	КонецЕсли;
		
	ПозицияДвоеточия = СтрНайти(Текст,":");
	
	Часы            = Сред(Текст,1,ПозицияДвоеточия-1);
	Минуты          = Сред(Текст,ПозицияДвоеточия+1,2);
	
	Пока СтрДлина(Часы) < 2 Цикл 
		Часы = СтрШаблон("0%1",Часы);
	КонецЦикла; 
	Пока СтрДлина(Минуты) < 2 Цикл 
		Минуты = СтрШаблон("0%1",Минуты);
	КонецЦикла;
	
	ДатаСтрокой = СтрЗаменить(СтрШаблон("00010101.%1.%2.00",Часы,Минуты),".","");

	Попытка
		Возврат Дата(ДатаСтрокой)
	Исключение
		Возврат '00010101';
	КонецПопытки;

	
КонецФункции // ЗначениеВремяИзСтроки()

&НаСервере
Процедура ЗаполнитьИсходныеДанныеИзТаблицыЗагрузки()

	ПроверкаРасписанияСтоловой();
	
	Объект.ИсходныеДанные.Загрузить(СтоловаяФункцииПроцедуры.ПолучитьТаблицуPERCo(ТаблицаЗагрузки));

КонецПроцедуры // ЗаполнитьИсходныеДанныеИзТаблицыЗагрузки()

&НаСервереБезКонтекста
Функция ПроверкаРасписанияСтоловой()

	Если Не ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Истина)
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
#Область ТекстЗапроса
	Запрос.Текст = "ВЫБРАТЬ
	|	ВидыСтолов.Ссылка КАК Ссылка,
	|	ВидыСтолов.Порядок КАК Порядок
	|ПОМЕСТИТЬ ВидыСтолов
	|ИЗ
	|	Перечисление.ВидыСтолов КАК ВидыСтолов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасписаниеРаботыСтоловой.ВидСтола КАК ВидСтола,
	|	РасписаниеРаботыСтоловой.ВремяНачала КАК ВремяНачала,
	|	РасписаниеРаботыСтоловой.ВремяОкончания КАК ВремяОкончания
	|ПОМЕСТИТЬ РасписаниеСтоловой
	|ИЗ
	|	РегистрСведений.РасписаниеРаботыСтоловой КАК РасписаниеРаботыСтоловой
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыСтолов.Ссылка КАК ВидСтола,
	|	ВЫБОР
	|		КОГДА ВидыСтолов.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтолов.Завтрак)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 6, 0, 0)
	|		КОГДА ВидыСтолов.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтолов.Обед)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 11, 0, 0)
	|		КОГДА ВидыСтолов.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтолов.Ужин)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 15, 35, 0)
	|		КОГДА ВидыСтолов.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтолов.ОбедНочь)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 23, 0, 0)
	|	КОНЕЦ КАК ВремяНачала,
	|	ВЫБОР
	|		КОГДА ВидыСтолов.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтолов.Завтрак)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 10, 0, 0)
	|		КОГДА ВидыСтолов.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтолов.Обед)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 15, 30, 0)
	|		КОГДА ВидыСтолов.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтолов.Ужин)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 22, 30, 0)
	|		КОГДА ВидыСтолов.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтолов.ОбедНочь)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 4, 30, 0)
	|	КОНЕЦ КАК ВремяОкончания
	|ИЗ
	|	ВидыСтолов КАК ВидыСтолов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РасписаниеСтоловой КАК РасписаниеСтоловой
	|		ПО ВидыСтолов.Ссылка = РасписаниеСтоловой.ВидСтола
	|ГДЕ
	|	(РасписаниеСтоловой.ВидСтола ЕСТЬ NULL
	|			ИЛИ РасписаниеСтоловой.ВремяНачала = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ РасписаниеСтоловой.ВремяОкончания = ДАТАВРЕМЯ(1, 1, 1))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВидыСтолов.Порядок";
	
#КонецОбласти
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Истина
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей =   РегистрыСведений.РасписаниеРаботыСтоловой.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидСтола.Установить(Выборка.ВидСтола);
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(),Выборка);
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
	КонецЦикла;
	

	СообщениеПользователю = Новый СообщениеПользователю;
	СообщениеПользователю.Текст = "Установлены значения по умолчанию для РС ""Расписание столовой""";
	СообщениеПользователю.Сообщить();
	
КонецФункции //ПроверкаРасписанияСтоловой()

#КонецОбласти 