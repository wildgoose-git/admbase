////////////////////////////////////////////////////////////////////////////////
// <Заголовок модуля: краткое описание и условия применения модуля.>
//  
////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// 1. Получаем список всех сотрудников за месяц порциями по 10
// 
// Параметры:
//  ПараметрыРасчета - Структура
//  АдресХранилища - Неопределено - Адрес хранилища
Процедура РассчитатьДанныеУчетаВремениФоновымЗаданием(ПараметрыРасчета, АдресХранилища = Неопределено) Экспорт
	
	ВыполнитьРасчет(ПараметрыРасчета);
	ПоместитьВоВременноеХранилище(ПараметрыРасчета, АдресХранилища);


КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Расчет 

Процедура ВыполнитьРасчет(ПараметрыРасчета)
	
	ФормированиеДокументаРасчета(ПараметрыРасчета);
	
	ТаблицаСотрудники = Новый ТаблицаЗначений;
	ТаблицаСотрудники.Колонки.Добавить("Сотрудник",Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаСотрудники",	ТаблицаСотрудники);
	Запрос.УстановитьПараметр("НачалоПериода",		НачалоМесяца(ПараметрыРасчета.Дата));
	Запрос.УстановитьПараметр("КонецПериода",		КонецМесяца(ПараметрыРасчета.Дата));
	Запрос.Текст = "ВЫБРАТЬ
	|	ТаблицаСотрудники.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ТаблицаСотрудники
	|ИЗ
	|	&ТаблицаСотрудники КАК ТаблицаСотрудники
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ  ПЕРВЫЕ 10
	|	УчетРабочегоВремениСотрудников.Сотрудник КАК Сотрудник,
	|	УчетРабочегоВремениСотрудников.Сотрудник.Наименование КАК СотрудникНаименование
	|ИЗ
	|	РегистрСведений.УчетРабочегоВремениСотрудников КАК УчетРабочегоВремениСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСотрудники КАК ТаблицаСотрудники
	|		ПО УчетРабочегоВремениСотрудников.Сотрудник = ТаблицаСотрудники.Сотрудник
	|ГДЕ
	|	УчетРабочегоВремениСотрудников.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ТаблицаСотрудники.Сотрудник ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	УчетРабочегоВремениСотрудников.Сотрудник
	|
	|УПОРЯДОЧИТЬ ПО
	|	СотрудникНаименование";
	
	
	Результат = Запрос.Выполнить();
	Пока Не Результат.Пустой() Цикл
		
		СотрудникиКРасчету = Результат.Выгрузить();
		
		//
		//@skip-check query-in-loop
		СтруктураДанных = ПолучитьДанныеДляРасчета(ПараметрыРасчета,СотрудникиКРасчету);
		РассчитатьИЗаписатьСводныеДанные(ПараметрыРасчета,СтруктураДанных);
		//
		
		Для Каждого СтрокаСотрудник Из СотрудникиКРасчету Цикл
			ЗаполнитьЗначенияСвойств(ТаблицаСотрудники.Добавить(),СтрокаСотрудник)
		КонецЦикла;
		
		Запрос.УстановитьПараметр("ТаблицаСотрудники",	ТаблицаСотрудники);
		//@skip-check query-in-loop
		Результат = Запрос.Выполнить();
		
	КонецЦикла;

КонецПроцедуры  // ВыполнитьРасчет()

Процедура РассчитатьИЗаписатьСводныеДанные(ПараметрыРасчета, СтруктураДанных)

	ВыборкаСотрудник = СтруктураДанных.УчетРабочегоВремениСотрудников.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ВыборкаГрафики   = СтруктураДанных.ГрафикиРабот.Выбрать();
	ВыборкаСостояния = СтруктураДанных.СостояниеСотрудников.Выбрать();
	
	НаборЗаписей = РегистрыСведений.СводкаРабочегоВремени.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ПараметрыРасчета.ДокументРасчета);

	Пока ВыборкаСотрудник.Следующий() Цикл
		ВыборкаДата = ВыборкаСотрудник.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаДата.Следующий() Цикл
			
			//++Формирование набора записей
			СтрокаРасчета = НаборЗаписей.Добавить();
			СтрокаРасчета.Регистратор 	= ПараметрыРасчета.ДокументРасчета;
			СтрокаРасчета.Сотрудник 	= ВыборкаДата.Сотрудник;
			СтрокаРасчета.Дата 			= ВыборкаДата.Дата;
			//~~Формирование набора записей
			
			
			Выборка = ВыборкаДата.Выбрать();
			ЗаполнитьСтрокуНабораДанных(СтрокаРасчета,Выборка,ВыборкаГрафики,ВыборкаСостояния,СтруктураДанных);
			
			
		КонецЦикла;
	КонецЦикла;

	НаборЗаписей.Записать(Ложь);
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуНабораДанных(СтрокаРасчета,Выборка,ВыборкаГрафики,ВыборкаСостояния,СтруктураДанных)

	 ВыборкаГрафики.Сбросить();
	 Если ВыборкаГрафики.НайтиСледующий(Новый Структура("Сотрудник,Дата",СтрокаРасчета.Сотрудник,СтрокаРасчета.Дата)) Тогда
		 
		 Если ВыборкаГрафики.РабочееВремяОкончаниеСекунда > ВыборкаГрафики.РабочееВремяНачалоСекунда Тогда
		  	 НормаЧислом = ВыборкаГрафики.РабочееВремяОкончаниеСекунда - ВыборкаГрафики.РабочееВремяНачалоСекунда 
										- ВыборкаГрафики.ПерерывОкончаниеСекунда + ВыборкаГрафики.ПерерывНачалоСекунда;

		ИначеЕсли ВыборкаГрафики.РабочееВремяОкончаниеСекунда < ВыборкаГрафики.РабочееВремяНачалоСекунда Тогда  //ночная смена
			Если ВыборкаГрафики.ПерерывОкончаниеСекунда > ВыборкаГрафики.ПерерывНачалоСекунда Тогда
				Перерыв =  ВыборкаГрафики.ПерерывОкончаниеСекунда - ВыборкаГрафики.ПерерывНачалоСекунда
			Иначе
				Перерыв =  86400 + ВыборкаГрафики.ПерерывОкончаниеСекунда - ВыборкаГрафики.ПерерывНачалоСекунда
			КонецЕсли;
			НормаЧислом = 86400 + ВыборкаГрафики.РабочееВремяОкончаниеСекунда - ВыборкаГрафики.РабочееВремяНачалоСекунда  - Перерыв; 				
		 Иначе								
		   НормаЧислом = 0;
		 КонецЕсли;
											
		СтрокаРасчета.ПерерывНачалоЧислом 			=  ВыборкаГрафики.ПерерывНачалоСекунда;                  
		СтрокаРасчета.ПерерывОкончаниеЧислом 		=  ВыборкаГрафики.ПерерывОкончаниеСекунда;                            
		СтрокаРасчета.РабочееВремяНачалоЧислом 		=  ВыборкаГрафики.РабочееВремяНачалоСекунда;                            
		СтрокаРасчета.РабочееВремяОкончаниеЧислом 	=  ВыборкаГрафики.РабочееВремяОкончаниеСекунда;                                               
		СтрокаРасчета.СхемаРаботы 					=  ВыборкаГрафики.СхемаРабочегоВремени;
		СтрокаРасчета.ГрафикРаботы 					=  ВыборкаГрафики.Календарь;
	 Иначе                                                                          
		НормаЧислом = 0;
	КонецЕсли;
	                                                                                 
	СтрокаРасчета.НормаЧислом =  НормаЧислом;                       
	СтрокаРасчета.НормаДатой  =  СекундыВДату(НормаЧислом); 

	 ВыборкаСостояния.Сбросить();
	 Если ВыборкаСостояния.НайтиСледующий(СтрокаРасчета.Сотрудник,"Сотрудник") Тогда
		 СтрокаРасчета.Подразделение 	=  ВыборкаСостояния.Подразделение;                       
		 СтрокаРасчета.Должность 		=  ВыборкаСостояния.Должность;                       
	 КонецЕсли;

	 //
	 МассивПроходов 		= Новый Массив;
	 МассивЗаявок 			= Новый Массив;
	 МассивОтклонений 		= Новый Массив;
	 МассивОбъяснительных 	= Новый Массив;
	 Пока Выборка.Следующий() Цикл
		 
		 СтруктураВыборки = ИнициализироватьСтруктуруВыборки(СтруктураДанных);
		 ЗаполнитьЗначенияСвойств(СтруктураВыборки,Выборка);
		 
		 Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ПроходыPerco")  Тогда
		 	 МассивПроходов.Добавить(СтруктураВыборки)
		 КонецЕсли;                                                      
		 Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ЗаявкиDMC")  Тогда
		 	 МассивЗаявок.Добавить(СтруктураВыборки)
		 КонецЕсли;
		 Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ОтклоненияERP")  Тогда
		 	 МассивОтклонений.Добавить(СтруктураВыборки)
		 КонецЕсли;
		  Если ТипЗнч(Выборка.Регистратор) = Тип("ДокументСсылка.ОбъяснительнаяЗаписка")  Тогда
		 	 МассивОбъяснительных.Добавить(СтруктураВыборки)
		 КонецЕсли;
	 КонецЦикла;
	 
	  ЗаполнитьСтрокуРасчетаПроходами(СтрокаРасчета,МассивПроходов);
	  ЗаполнитьСтрокуЗаявками(СтрокаРасчета,МассивЗаявок);
	  ЗаполнитьСтрокуОтклонениями(СтрокаРасчета,МассивОтклонений);
	  ЗаполнитьСтрокуОбъяснениями(СтрокаРасчета,МассивОбъяснительных);

КонецПроцедуры
 
Процедура ЗаполнитьСтрокуРасчетаПроходами(СтрокаРасчета,МассивВыборок)
	
	Для Индекс = 0 По МассивВыборок.Вграница()  Цикл
		
		Выборка = МассивВыборок[Индекс];
		
		Если Индекс = 0 Тогда   //Все пока заполняем по первому док-ту прохода
			
			СтрокаРасчета.ВходДатой   			= Выборка.ВходДатой;
			СтрокаРасчета.ВходЧислом  			= Выборка.ВходЧислом;
			СтрокаРасчета.ВыходДатой   			= Выборка.ВыходДатой;
			СтрокаРасчета.ВыходЧислом  			= Выборка.ВыходЧислом;
			СтрокаРасчета.ПрисутствиеДатой   	= Выборка.ПрисутствиеДатой;
			СтрокаРасчета.ПрисутствиеЧислом  	= Выборка.ПрисутствиеЧислом;
			
			НочнаяСмена =  Выборка.ДатаВыход  <> '00010101';
			
			Если СтрокаРасчета.НормаЧислом = 0 Тогда
				//++Сверх рабочего времени
				 СтрокаРасчета.ОтработаноСверхРабочееВремяЧислом = ОтработанныеВСекундах(СтрокаРасчета.ВходЧислом,
				   																			СтрокаРасчета.ВыходЧислом,
																							СтрокаРасчета.РабочееВремяНачалоЧислом,
																							СтрокаРасчета.РабочееВремяОкончаниеЧислом,
					                														СтрокаРасчета.ПерерывНачалоЧислом,
																							СтрокаРасчета.ПерерывОкончаниеЧислом,
																							НочнаяСмена)
										+ ОтработаноВСекундахСверх(СтрокаРасчета.ВходЧислом,
																	СтрокаРасчета.ВыходЧислом,
																	СтрокаРасчета.РабочееВремяОкончаниеЧислом,
																	НочнаяСмена);
									
				СтрокаРасчета.ОтработаноСверхРабочееВремяДатой   = СекундыВДату(СтрокаРасчета.ОтработаноСверхРабочееВремяЧислом);
				//--Сверх рабочего времени

			Иначе                                                              
				//++РабочееВремя
				СтрокаРасчета.ОтработаноРабочееВремяЧислом = ОтработанныеВСекундах(СтрокаРасчета.ВходЧислом,СтрокаРасчета.ВыходЧислом,
								СтрокаРасчета.РабочееВремяНачалоЧислом,СтрокаРасчета.РабочееВремяОкончаниеЧислом,
								СтрокаРасчета.ПерерывНачалоЧислом,СтрокаРасчета.ПерерывОкончаниеЧислом,
								НочнаяСмена);
				
				СтрокаРасчета.ОтработаноРабочееВремяДатой = СекундыВДату(СтрокаРасчета.ОтработаноРабочееВремяЧислом);
				//--РабочееВремя
				//++Сверх рабочего времени
				СтрокаРасчета.ОтработаноСверхРабочееВремяЧислом  = ОтработаноВСекундахСверх(СтрокаРасчета.ВходЧислом,
																							СтрокаРасчета.ВыходЧислом,
																							СтрокаРасчета.РабочееВремяОкончаниеЧислом,
																							НочнаяСмена);
				СтрокаРасчета.ОтработаноСверхРабочееВремяДатой   = СекундыВДату(СтрокаРасчета.ОтработаноСверхРабочееВремяЧислом);
				//--Сверх рабочего времени

			КонецЕсли;
		Иначе   //Последующиедок-ты прохода складываю в рабочее время за территорией
			

			 СтрокаРасчета.РабочееВремяЗаТерриториейЧислом 	   	= СтрокаРасчета.РабочееВремяЗаТерриториейЧислом  
			 														+ ОтработанныеВСекундах(Выборка.ВходЧислом,
				   																			Выборка.ВыходЧислом,
																							СтрокаРасчета.РабочееВремяНачалоЧислом,
																							СтрокаРасчета.РабочееВремяОкончаниеЧислом,
					                														СтрокаРасчета.ПерерывНачалоЧислом,
																							СтрокаРасчета.ПерерывОкончаниеЧислом,
																							НочнаяСмена)
										+ ОтработаноВСекундахСверх(Выборка.ВходЧислом,
																	Выборка.ВыходЧислом,
																	СтрокаРасчета.РабочееВремяОкончаниеЧислом,
																	НочнаяСмена);

			СтрокаРасчета.РабочееВремяЗаТерриториейДатой 	   	= СекундыВДату(СтрокаРасчета.РабочееВремяЗаТерриториейЧислом);

		КонецЕсли;
		
	КонецЦикла;
	   
КонецПроцедуры

Процедура ЗаполнитьСтрокуЗаявками(СтрокаРасчета,МассивВыборок)
	
	Если МассивВыборок.ВГраница() = -1 Тогда
		Возврат
	КонецЕсли;
	
	Выборка =  МассивВыборок[МассивВыборок.ВГраница()]; //берем только одну последнюю
	
	Если  Выборка.КатегорияОтсутствия = Перечисления.КатергорииОтсутствия.НеУчитывать
		Или Выборка.КатегорияОтсутствия.Пустая() Тогда
		Возврат;
	КонецЕсли;
	

	//++Отсутсвие расчитываем по формуле: Норма - Отработано в рабочее время = Отсутствие (при условии наличия причины Личные обстоятельства)
	Если  Выборка.КатегорияОтсутствия = Перечисления.КатергорииОтсутствия.Отсутствие Тогда
		СтрокаРасчета.ОтсутствиеЧислом = СтрокаРасчета.НормаЧислом - СтрокаРасчета.ОтработаноРабочееВремяЧислом;
		СтрокаРасчета.ОтсутствиеДатой = СекундыВДату(СтрокаРасчета.ОтсутствиеЧислом);
	КонецЕсли;  
	//--Отсутсвие
	
	//++ПроизводственнаяНеобходимость   Норма (08:00) - Отработано в рабочее время = Рабочее  время за территорией (при условии наличия причины Производственная необходимость)
	Если  Выборка.КатегорияОтсутствия = Перечисления.КатергорииОтсутствия.РабочееВремяЗаТерриторией Тогда
		СтрокаРасчета.РабочееВремяЗаТерриториейЧислом = СтрокаРасчета.НормаЧислом - СтрокаРасчета.ОтработаноРабочееВремяЧислом;
		СтрокаРасчета.РабочееВремяЗаТерриториейДатой  = СекундыВДату(СтрокаРасчета.РабочееВремяЗаТерриториейЧислом);
	КонецЕсли;
	//--ПроизводственнаяНеобходимость                                                                                   

	СтрокаРасчета.СодержаниеЗаявкиНомерСтроки 	=  Выборка.СодержаниеЗаявкиНомерСтроки;
	СтрокаРасчета.НомерДокументаDMC 			=  Выборка.НомерДокументаDMC;
	СтрокаРасчета.ДатаДокументаDMC 				=  Выборка.ДатаДокументаDMC;
	СтрокаРасчета.ЗаявкаDMC 					=  Выборка.Регистратор;          
	СтрокаРасчета.ПричинаОтсутствия 			=  Выборка.ПричинаОтсутствия;          
	
КонецПроцедуры

Процедура ЗаполнитьСтрокуОтклонениями(СтрокаРасчета,МассивВыборок)
	
	МассивНаименований = Новый Массив;
	МассивНаименований.Добавить("Больничный лист");
	МассивНаименований.Добавить("Отпуск");
	МассивНаименований.Добавить("Отпуск без сохранения оплаты");
	МассивНаименований.Добавить("Увольнение");

	Для каждого Выборка Из МассивВыборок Цикл
	
		Если Не МассивНаименований.Найти(Выборка.ТипДокументаНаименование) = Неопределено Тогда
			СтрокаРасчета.ОтпускБольничныйУвольнениеЧислом = СтрокаРасчета.НормаЧислом;
			СтрокаРасчета.ОтпускБольничныйУвольнениеДатой  = СтрокаРасчета.НормаДатой;
			СтрокаРасчета.ОтсутствиеЧислом = 0;
			СтрокаРасчета.ОтсутствиеДатой  = '00010101';                        
			
			СтрокаРасчета.ТипДокумента 		= Выборка.ТипДокумента;                             
			СтрокаРасчета.НомерДокументаERP = Выборка.НомерДокументаERP;                             
			СтрокаРасчета.ДатаДокументаERP 	= Выборка.ДатаДокументаERP;                             
		КонецЕсли;                                                                        
		
		Если Выборка.ТипДокументаНаименование = "Командировка" Тогда
			СтрокаРасчета.РабочееВремяЗаТерриториейЧислом 	   	= СтрокаРасчета.НормаЧислом;
			СтрокаРасчета.РабочееВремяЗаТерриториейДатой 	   	= СтрокаРасчета.НормаДатой;
			СтрокаРасчета.ОтсутствиеЧислом = 0;
			СтрокаРасчета.ОтсутствиеДатой  = '00010101';
			
			СтрокаРасчета.ТипДокумента 		= Выборка.ТипДокумента;                             
			СтрокаРасчета.НомерДокументаERP = Выборка.НомерДокументаERP;                             
			СтрокаРасчета.ДатаДокументаERP 	= Выборка.ДатаДокументаERP;                             

		КонецЕсли;

		
		Если Выборка.ТипДокументаНаименование = "Отсутствие (болезнь, прогул, неявка)" 
					И СтрокаРасчета.РабочееВремяЗаТерриториейЧислом = 0 
					И СтрокаРасчета.ОтпускБольничныйУвольнениеЧислом = 0  Тогда
					
			СтрокаРасчета.ОтсутствиеЧислом 	   	= СтрокаРасчета.НормаЧислом;
			СтрокаРасчета.ОтсутствиеДатой 	   	= СтрокаРасчета.НормаДатой;
			
			СтрокаРасчета.ТипДокумента 		= Выборка.ТипДокумента;                             
			СтрокаРасчета.НомерДокументаERP = Выборка.НомерДокументаERP;                             
			СтрокаРасчета.ДатаДокументаERP 	= Выборка.ДатаДокументаERP;                             

		КонецЕсли;
	
	КонецЦикла;
	   

КонецПроцедуры

Процедура ЗаполнитьСтрокуОбъяснениями(СтрокаРасчета,МассивВыборок)
	
	Если МассивВыборок.ВГраница() = -1 Тогда
		Возврат
	КонецЕсли;

	Выборка =  МассивВыборок[МассивВыборок.ВГраница()]; //берем только одну последнюю
	СтрокаРасчета.ОбъяснительнаяЗаписка = Выборка.ОбъяснительнаяЗаписка;

КонецПроцедуры                                 

#КонецОбласти

#Область ПолучениеДанных
 
Функция ПолучитьДанныеДляРасчета(ПараметрыРасчета,СотрудникиКРасчету)

	Запрос = Новый Запрос;
	Запрос.Текст = СформироватьТекстЗапроса(ПараметрыРасчета);
	Запрос.УстановитьПараметр("СотрудникиКРасчету",	СотрудникиКРасчету);
	Запрос.УстановитьПараметр("НачалоПериода",		НачалоМесяца(ПараметрыРасчета.Дата));
	Запрос.УстановитьПараметр("КонецПериода",		КонецМесяца(ПараметрыРасчета.Дата));
	
	Результат = Запрос.ВыполнитьПакет();
	ВерхняяГраница = Результат.ВГраница();
	
	СтруктураДанных = НОвый Структура;
	
	СтруктураДанных.Вставить("ГрафикиРабот",					Результат[ВерхняяГраница-2]);
	СтруктураДанных.Вставить("УчетРабочегоВремениСотрудников",	Результат[ВерхняяГраница-1]);
	СтруктураДанных.Вставить("СостояниеСотрудников",			Результат[ВерхняяГраница]);

	Возврат СтруктураДанных;
	
КонецФункции // ПолучитьДанныеДляРасчета()
	
#Область ТекстыЗапросов

Функция СформироватьТекстЗапроса(ПараметрыРасчета)
	
	МассивТекстов = Новый Массив;
	МассивТекстов.Добавить(ТекстЗапросаСотрудникиКРасчету());
	МассивТекстов.Добавить(ТекстЗапросаКалендарныеДаты(ПараметрыРасчета.Дата));
	МассивТекстов.Добавить(ТекстЗапросаГрафикиРабот());
	МассивТекстов.Добавить(ТекстЗапросаУчетВремени());
	МассивТекстов.Добавить(ТекстЗапросаСостоянияСотрудников());
	
	Разделитель = "
				  |;
	              |
	              |////////////////////////////////////////////////////////////////////////////////
	              |";

	Возврат СтрСоединить(МассивТекстов,Разделитель);
	
КонецФункции // СформироватьТекстЗапроса()

Функция ТекстЗапросаСотрудникиКРасчету()
	
	Возврат "ВЫБРАТЬ
	|	СотрудникиКРасчету.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ СотрудникиКРасчету
	|ИЗ
	|	&СотрудникиКРасчету КАК СотрудникиКРасчету
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник";
	
КонецФункции // ТекстЗапросаСотрудникиКРасчету()

Функция ТекстЗапросаКалендарныеДаты(Дата)
	
	МассивСтрок = Новый Массив;
	МассивСтрок.Добавить("ВЫБРАТЬ ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, 0) КАК Дата 
		|ПОМЕСТИТЬ КалендарныеДаты");
	
	НачалоПериода = НачалоМесяца(Дата);
	КонецПериода  = КонецМесяца(Дата) ;
	Счетчик = 1;
	Пока НачалоПериода + Счетчик * 86400 < КонецПериода Цикл
		
		МассивСтрок.Добавить(СтрШаблон("ВЫБРАТЬ ДОБАВИТЬКДАТЕ(&НачалоПериода, ДЕНЬ, %1)",Счетчик));
		
		Счетчик = Счетчик + 1;	
		
	КонецЦикла;
	
	РазделительСтроки = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|";
	
	Возврат СтрСоединить(МассивСтрок,РазделительСтроки);

КонецФункции // ТекстЗапросаКалендарныеДаты()

Функция ТекстЗапросаУчетВремени()
	
	Возврат
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетРабочегоВремениСотрудников.Регистратор КАК Регистратор,
	|	УчетРабочегоВремениСотрудников.НомерСтроки КАК НомерСтроки,
	|	УчетРабочегоВремениСотрудников.Сотрудник КАК Сотрудник,
	|	УчетРабочегоВремениСотрудников.Дата КАК Дата,
	|	УчетРабочегоВремениСотрудников.СтрокаДокумента КАК СтрокаДокумента,
	|	УчетРабочегоВремениСотрудников.ДокументДвижения КАК ДокументДвижения,
	|	УчетРабочегоВремениСотрудников.ВходДатой КАК ВходДатой,
	|	РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), УчетРабочегоВремениСотрудников.ВходДатой, СЕКУНДА) КАК ВходЧислом,
	|	УчетРабочегоВремениСотрудников.ВыходДатой КАК ВыходДатой,
	|	РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), УчетРабочегоВремениСотрудников.ВыходДатой, СЕКУНДА) КАК ВыходЧислом,
	|	УчетРабочегоВремениСотрудников.ПрисутствиеДатой КАК ПрисутствиеДатой,
	|	РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), УчетРабочегоВремениСотрудников.ПрисутствиеДатой, СЕКУНДА) КАК ПрисутствиеЧислом,
	|	УчетРабочегоВремениСотрудников.ОтработаноРабочееВремяДатой КАК ОтработаноРабочееВремяДатой,
	|	УчетРабочегоВремениСотрудников.ОтработаноРабочееВремяЧислом КАК ОтработаноРабочееВремяЧислом,
	|	УчетРабочегоВремениСотрудников.ОтработаноСверхРабочееВремяДатой КАК ОтработаноСверхРабочееВремяДатой,
	|	УчетРабочегоВремениСотрудников.ОтработаноСверхРабочееВремяЧислом КАК ОтработаноСверхРабочееВремяЧислом,
	|	УчетРабочегоВремениСотрудников.РабочееВремяЗаТерриториейДатой КАК РабочееВремяЗаТерриториейДатой,
	|	УчетРабочегоВремениСотрудников.РабочееВремяЗаТерриториейЧислом КАК РабочееВремяЗаТерриториейЧислом,
	|	УчетРабочегоВремениСотрудников.ОтсутствиеДатой КАК ОтсутствиеДатой,
	|	УчетРабочегоВремениСотрудников.ОтсутствиеЧислом КАК ОтсутствиеЧислом,
	|	УчетРабочегоВремениСотрудников.ОтпускБольничныйУвольнениеДатой КАК ОтпускБольничныйУвольнениеДатой,
	|	УчетРабочегоВремениСотрудников.ОтпускБольничныйУвольнениеЧислом КАК ОтпускБольничныйУвольнениеЧислом,
	|	УчетРабочегоВремениСотрудников.ВремяНачалаДатой КАК ВремяНачалаДатой,
	|	УчетРабочегоВремениСотрудников.ВремяНачалаЧислом КАК ВремяНачалаЧислом,
	|	УчетРабочегоВремениСотрудников.ВремяОкончанияДатой КАК ВремяОкончанияДатой,
	|	УчетРабочегоВремениСотрудников.ВремяОкончанияЧислом КАК ВремяОкончанияЧислом,
	|	УчетРабочегоВремениСотрудников.ДатаВыход КАК ДатаВыход,
	|	УчетРабочегоВремениСотрудников.СодержаниеЗаявкиНомерСтроки КАК СодержаниеЗаявкиНомерСтроки,
	|	УчетРабочегоВремениСотрудников.ПричинаОтсутствия КАК ПричинаОтсутствия,
	|	ПричиныОтсутсвия.КатегорияОтсутствия КАК КатегорияОтсутствия,
	|	ЕСТЬNULL(УчетРабочегоВремениСотрудников.ПричинаОтсутствия.Наименование, """") КАК ПричинаОтсутствияНаименование,
	|	УчетРабочегоВремениСотрудников.ТипДокумента КАК ТипДокумента,
	|	ЕСТЬNULL(УчетРабочегоВремениСотрудников.ТипДокумента.Наименование, """") КАК ТипДокументаНаименование,
	|	УчетРабочегоВремениСотрудников.ОбъяснительнаяЗаписка КАК ОбъяснительнаяЗаписка,
	|	УчетРабочегоВремениСотрудников.НомерДокументаDMC КАК НомерДокументаDMC,
	|	УчетРабочегоВремениСотрудников.ДатаДокументаDMC КАК ДатаДокументаDMC,
	|	УчетРабочегоВремениСотрудников.НомерДокументаERP КАК НомерДокументаERP,
	|	УчетРабочегоВремениСотрудников.ДатаДокументаERP КАК ДатаДокументаERP,
	|	УчетРабочегоВремениСотрудников.Территория КАК Территория,
	|	УчетРабочегоВремениСотрудников.Рассчитан КАК Рассчитан,
	|	УчетРабочегоВремениСотрудников.ДокументРасчета КАК ДокументРасчета
	|ИЗ
	|	РегистрСведений.УчетРабочегоВремениСотрудников КАК УчетРабочегоВремениСотрудников
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ СотрудникиКРасчету КАК СотрудникиКРасчету
	|		ПО УчетРабочегоВремениСотрудников.Сотрудник = СотрудникиКРасчету.Сотрудник
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПричиныОтсутсвия КАК ПричиныОтсутсвия
	|		ПО УчетРабочегоВремениСотрудников.ПричинаОтсутствия = ПричиныОтсутсвия.Ссылка
	|ГДЕ
	|	УчетРабочегоВремениСотрудников.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И УчетРабочегоВремениСотрудников.Рассчитан = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	Дата,
	|	НомерСтроки
	|ИТОГИ ПО
	|	Сотрудник,
	|	Дата";

КонецФункции // ТекстЗапросаУчетВремени()

Функция ТекстЗапросаГрафикиРабот()
	
	Возврат "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КалендарныеДаты.Дата КАК Дата,
	|	ГрафикиРаботПостоянныеСрезПоследних.Сотрудник КАК Сотрудник,
	|	ГрафикиРаботПостоянныеСрезПоследних.РабочееВремяНачало КАК РабочееВремяНачало,
	|	ГрафикиРаботПостоянныеСрезПоследних.РабочееВремяОкончание КАК РабочееВремяОкончание,
	|	ГрафикиРаботПостоянныеСрезПоследних.ПерерывНачало КАК ПерерывНачало,
	|	ГрафикиРаботПостоянныеСрезПоследних.ПерерывОкончание КАК ПерерывОкончание,
	|	ГрафикиРаботПостоянныеСрезПоследних.СхемаРабочегоВремени КАК СхемаРабочегоВремени,
	|	ГрафикиРаботПостоянныеСрезПоследних.Календарь КАК Календарь,
	|	1 КАК Приоритет
	|ПОМЕСТИТЬ ГрафикиРабот
	|ИЗ
	|	КалендарныеДаты КАК КалендарныеДаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботПостоянные.СрезПоследних(
	|				&КонецПериода,
	|				Сотрудник В
	|					(ВЫБРАТЬ
	|						СотрудникиКРасчету.Сотрудник КАК Сотрудник
	|					ИЗ
	|						СотрудникиКРасчету КАК СотрудникиКРасчету)) КАК ГрафикиРаботПостоянныеСрезПоследних
	|		ПО (ИСТИНА)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КалендарныеДаты.Дата,
	|	ГрафикиРаботИндивидуальные.Сотрудник,
	|	ГрафикиРаботИндивидуальные.РабочееВремяНачало,
	|	ГрафикиРаботИндивидуальные.РабочееВремяОкончание,
	|	ГрафикиРаботИндивидуальные.ПерерывНачало,
	|	ГрафикиРаботИндивидуальные.ПерерывОкончание,
	|	ГрафикиРаботИндивидуальные.СхемаРабочегоВремени,
	|	ГрафикиРаботИндивидуальные.Календарь,
	|	0
	|ИЗ
	|	КалендарныеДаты КАК КалендарныеДаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботИндивидуальные КАК ГрафикиРаботИндивидуальные
	|		ПО КалендарныеДаты.Дата = ГрафикиРаботИндивидуальные.Период
	|ГДЕ
	|	ГрафикиРаботИндивидуальные.Сотрудник В
	|			(ВЫБРАТЬ
	|				СотрудникиКРасчету.Сотрудник КАК Сотрудник
	|			ИЗ
	|				СотрудникиКРасчету КАК СотрудникиКРасчету)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиРабот.Дата КАК Дата,
	|	ГрафикиРабот.Сотрудник КАК Сотрудник,
	|	МИНИМУМ(ГрафикиРабот.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ Отсекающая
	|ИЗ
	|	ГрафикиРабот КАК ГрафикиРабот
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрафикиРабот.Дата,
	|	ГрафикиРабот.Сотрудник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КалендарныеГрафики.Календарь КАК Календарь,
	|	КалендарныеГрафики.ДатаГрафика КАК ДатаГрафика,
	|	КалендарныеГрафики.ДеньВключенВГрафик КАК ДеньВключенВГрафик
	|ПОМЕСТИТЬ КалендарныеГрафики
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|ГДЕ
	|	(КалендарныеГрафики.ДатаГрафика, КалендарныеГрафики.Календарь) В
	|			(ВЫБРАТЬ
	|				ГрафикиРабот.Дата КАК Дата,
	|				ГрафикиРабот.Календарь КАК Календарь
	|			ИЗ
	|				ГрафикиРабот КАК ГрафикиРабот)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГрафикиРабот.Дата КАК Дата,
	|	ГрафикиРабот.Сотрудник КАК Сотрудник,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КалендарныеГрафики.ДеньВключенВГрафик, ЛОЖЬ)
	|			ТОГДА ГрафикиРабот.РабочееВремяНачало
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК РабочееВремяНачало,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КалендарныеГрафики.ДеньВключенВГрафик, ЛОЖЬ)
	|			ТОГДА РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ГрафикиРабот.РабочееВремяНачало, СЕКУНДА)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РабочееВремяНачалоСекунда,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КалендарныеГрафики.ДеньВключенВГрафик, ЛОЖЬ)
	|			ТОГДА ГрафикиРабот.РабочееВремяОкончание
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК РабочееВремяОкончание,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КалендарныеГрафики.ДеньВключенВГрафик, ЛОЖЬ)
	|			ТОГДА РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ГрафикиРабот.РабочееВремяОкончание, СЕКУНДА)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК РабочееВремяОкончаниеСекунда,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КалендарныеГрафики.ДеньВключенВГрафик, ЛОЖЬ)
	|			ТОГДА ГрафикиРабот.ПерерывНачало
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ПерерывНачало,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КалендарныеГрафики.ДеньВключенВГрафик, ЛОЖЬ)
	|			ТОГДА РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ГрафикиРабот.ПерерывНачало, СЕКУНДА)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПерерывНачалоСекунда,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КалендарныеГрафики.ДеньВключенВГрафик, ЛОЖЬ)
	|			ТОГДА ГрафикиРабот.ПерерывОкончание
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1)
	|	КОНЕЦ КАК ПерерывОкончание,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КалендарныеГрафики.ДеньВключенВГрафик, ЛОЖЬ)
	|			ТОГДА РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1), ГрафикиРабот.ПерерывОкончание, СЕКУНДА)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПерерывОкончаниеСекунда,
	|	ГрафикиРабот.СхемаРабочегоВремени КАК СхемаРабочегоВремени,
	|	ГрафикиРабот.Приоритет КАК Приоритет,
	|	ГрафикиРабот.Календарь КАК Календарь
	|ИЗ
	|	ГрафикиРабот КАК ГрафикиРабот
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Отсекающая КАК Отсекающая
	|		ПО ГрафикиРабот.Дата = Отсекающая.Дата
	|			И ГрафикиРабот.Сотрудник = Отсекающая.Сотрудник
	|			И ГрафикиРабот.Приоритет = Отсекающая.Приоритет
	|		ЛЕВОЕ СОЕДИНЕНИЕ КалендарныеГрафики КАК КалендарныеГрафики
	|		ПО ГрафикиРабот.Календарь = КалендарныеГрафики.Календарь
	|			И ГрафикиРабот.Дата = КалендарныеГрафики.ДатаГрафика
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	Дата";
	
КонецФункции // ТекстЗапросаГрафикиРабот()

Функция ТекстЗапросаСостоянияСотрудников()

	Возврат "ВЫБРАТЬ  РАЗРЕШЕННЫЕ
	|	СостояниеСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
	|	СостояниеСотрудниковСрезПоследних.Подразделение КАК Подразделение,
	|	СостояниеСотрудниковСрезПоследних.Должность КАК Должность
	|ИЗ
	|	РегистрСведений.СостояниеСотрудников.СрезПоследних(
	|			&КонецПериода,
	|			Сотрудник В
	|				(ВЫБРАТЬ
	|					СотрудникиКРасчету.Сотрудник КАК Сотрудник
	|				ИЗ
	|					СотрудникиКРасчету КАК СотрудникиКРасчету)) КАК СостояниеСотрудниковСрезПоследних";

КонецФункции // ТекстЗапросаСостоянияСотрудников()
	
#КонецОбласти

#КонецОбласти


Функция СекундыВДату(КоличествоСекунд) Экспорт 
	
	Если Не ТипЗнч(КоличествоСекунд) = Тип("Число") Тогда
		Возврат '00010101'
	КонецЕсли;
	
	
	Часы 	= Цел(КоличествоСекунд / 3600);
	Минуты  = Цел((КоличествоСекунд - Часы * 3600) / 60);
	
	Попытка
		Возврат Дата(1,1,1,Часы,Минуты,0)
	Исключение
		Возврат '00010101'
	КонецПопытки;

	
КонецФункции // СекундыВДату()

Функция ОтработанныеВСекундах(Знач Вход,Знач Выход,ВремяНачала,ВремяОкончания,
								Знач ПерерывНачало,Знач ПерерывОкончание, НочнаяСмена) Экспорт
	
	Если Вход = 0 Или ВремяНачала = 0 Тогда
		Возврат 0
	КонецЕсли; 
	
	//устаналиваю значения по расписанию
	//если пришел раньше то ставим время начала смены
	//если вышел позже то ставим время окончания смены
	Если Вход < ВремяНачала  Тогда
		Вход = ВремяНачала;
	КонецЕсли; 
	Если Выход > ВремяОкончания  Тогда
		Выход = ВремяОкончания;
	КонецЕсли;
	
	Перерыв = 0;
	
	Если ПерерывНачало = 0 Тогда
		УчитыватьПерерыв =  Выход > ПерерывОкончание;
	Иначе
		УчитыватьПерерыв = Вход < ПерерывНачало  И Выход > ПерерывОкончание;
	КонецЕсли;
	
	Если УчитыватьПерерыв Тогда
		Перерыв =  ПерерывОкончание - ПерерывНачало
	КонецЕсли; 

	Если  НочнаяСмена Тогда  //выход переносим на полночь, вход переносим вперед
		Если УчитыватьПерерыв Тогда
			Если ПерерывОкончание > ПерерывНачало Тогда
				Перерыв =  ПерерывОкончание - ПерерывНачало
			Иначе
				Перерыв =  86400 + ПерерывОкончание - ПерерывНачало
			КонецЕсли;
		КонецЕсли;

		Вход 	= Вход - Выход;
		Выход 	= 86400;
		
	КонецЕсли;

	Возврат Выход - Вход - Перерыв;

КонецФункции // ОтработанныеСекунды()

Функция ОтработаноВСекундахСверх(Знач Вход,Знач Выход,ВремяОкончания,НочнаяСмена) Экспорт 
	
	//выходной
	Если Вход <> 0 И Выход <> 0 И ВремяОкончания = 0 Тогда
		Если НочнаяСмена Тогда
			Возврат 86400 - Вход + Выход
		Иначе
			Возврат Выход - Вход
		КонецЕсли;
	КонецЕсли; 

	//рабочий день
	Если  Выход = 0 Или ВремяОкончания = 0 Или Выход < ВремяОкончания Тогда
		Возврат 0
	КонецЕсли; 
	
	Возврат Выход - ВремяОкончания;

КонецФункции // ОтработаноВСекундахСверх()

Функция ИнициализироватьСтруктуруВыборки(СтруктураДанных)
	
	СтруктураВыборки = Новый Структура;
	Для каждого Колока Из СтруктураДанных.УчетРабочегоВремениСотрудников.Колонки Цикл
		СтруктураВыборки.Вставить(Колока.Имя)
	КонецЦикла;
	
	Возврат СтруктураВыборки;
	
КонецФункции // ИнициализироватьСтруктуруВыборки()

Процедура ФормированиеДокументаРасчета(ПараметрыРасчета)

	Если ПараметрыРасчета.Свойство("ДокументРасчета") И ЗначениеЗаполнено(ПараметрыРасчета.ДокументРасчета) Тогда
		ДокументОбъект = ПараметрыРасчета.ДокументРасчета.ПолучитьОбъект();
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Дата",НачалоМесяца(ПараметрыРасчета.Дата));
		Запрос.Текст = "ВЫБРАТЬ
		|	РасчетРабочегоВремени.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.РасчетРабочегоВремени КАК РасчетРабочегоВремени
		|ГДЕ
		|	РасчетРабочегоВремени.Дата = &Дата";
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			ДокументОбъект = Документы.РасчетРабочегоВремени.СоздатьДокумент();
		Иначе
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			ДокументОбъект = Выборка.Ссылка.ПолучитьОбъект();
		КонецЕсли;
	КонецЕсли;
	
	ДокументОбъект.Дата = НачалоМесяца(ПараметрыРасчета.Дата);
	ДокументОбъект.УстановитьНовыйНомер();
	ДокументОбъект.Отвественный = Пользователи.ТекущийПользователь();
	ДокументОбъект.ПометкаУдаления = Ложь;
	ДокументОбъект.Проведен = Истина;
	ДокументОбъект.Записать();
	
	ПараметрыРасчета.Вставить("ДокументРасчета",ДокументОбъект.Ссылка);


	НаборЗаписей = РегистрыСведений.СводкаРабочегоВремени.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(ДокументОбъект.Ссылка);
	НаборЗаписей.Записать();
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
