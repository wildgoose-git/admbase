#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановиьОтборДинамическихСписков();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗакрытаФормаМеню" Тогда
		
		//ТекущаяСтрока = Элементы.СоставМеню.ТекущаяСтрока;
		//
		//ОбновитьСоставМенюНаСервере();
		//
		//Элементы.СоставМеню.ТекущаяСтрока = ТекущаяСтрока;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ИзменениеЗаписиРегистраКалендарьМеню" Тогда
		Элементы.КалендарьИтоги.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ОбработчикЗакрытия = Новый ОписаниеОповещения("ПредставлениеПериодаРегистрацииНачалоВыбораЗавершение", ЭтотОбъект);
	ПараметрыФормы 	   = Новый Структура("Значение, РежимВыбораПериода", ПериодРегистрации, "МЕСЯЦ");
	
	ОткрытьФорму("ОбщаяФорма.ВыборПериода",
		ПараметрыФормы, 
		ЭтотОбъект, 
		УникальныйИдентификатор,
		,
		, 
		ОбработчикЗакрытия,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

		
	

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	РегулированиеПредставленияПериодаРегистрации(
					Направление,
					СтандартнаяОбработка,
					ПериодРегистрации,
					ПредставлениеПериодаРегистрации);
	
	УстановиьОтборДинамическихСписков();


КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УстановиьОтборДинамическихСписков();

КонецПроцедуры


&НаКлиенте
Процедура ОтчетОстаткиПродутовНажатие(Элемент)
	
	ОткрытьФорму("Отчет.ОстаткиПродуктов.ФормаОбъекта",Новый Структура("СформироватьПриОткрытии",Истина),ЭтотОбъект);
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыКалендарьМеню

&НаКлиенте
Процедура КалендарьМенюПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	СообщениеПользователю = Новый СообщениеПользователю;
	СообщениеПользователю.Текст = "Операция не предусмотрена разработчиком";
	СообщениеПользователю.Сообщить();
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КалендарьМенюПередУдалением(Элемент, Отказ)
	СообщениеПользователю = Новый СообщениеПользователю;
	СообщениеПользователю.Текст = "Операция не предусмотрена разработчиком";
	СообщениеПользователю.Сообщить();
	Отказ = Истина;
КонецПроцедуры


&НаКлиенте
Процедура КалендарьМенюПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УстановитьпараметрыДинамическихСписков();//для обновления цифр
	
КонецПроцедуры



#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыСоставМеню

&НаКлиенте
Процедура СоставМенюВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтрокаДерева = СоставМеню.НайтиПоИдентификатору(ВыбраннаяСтрока);
	Если Не СтрокаДерева = Неопределено И ЗначениеЗаполнено(СтрокаДерева.Меню) Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.Номенклатура.Форма.ФормаЭлемента",Новый Структура("Ключ",СтрокаДерева.Меню),ЭтотОбъект);
	КонецЕсли;
	//Поле.Имя
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьКалендарь(Команда)
	
	МассивТекстов = Новый Массив;
	
	Если  ВсегоЧеловек = 0 Тогда
		МассивТекстов.Добавить("Пустое значение ""Всего человек""");
	КонецЕсли;
	Если  НочнаяСмена = 0 Тогда
		МассивТекстов.Добавить("Пустое значение ""Ночная смена""");
	КонецЕсли;

	Если СуществуютЗаписиРегистраКалендарьМеню(ПериодРегистрации) Тогда
		МассивТекстов.Добавить("Записи календаря уже заполнены");
	КонецЕсли;
	
	Если МассивТекстов.Количество() > 0 Тогда
		ТекстВопроса = СтрШаблон("%1%2%3",СтрСоединить(МассивТекстов,","),Символы.ПС,"Продолжить?");
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияВопросаЗаполнитьКалендарь", ЭтотОбъект, Новый Структура);
		ПоказатьВопрос(ОписаниеОповещения,ТекстВопроса,РежимДиалогаВопрос.ДаНет);
	Иначе	
		ЗаполнитьКалендарьНаСервере();
	КонецЕсли;
	

КонецПроцедуры

// @skip-check module-structure-form-event-regions
// 
// Параметры:
//  Результат -КодВозвратаДиалога
//  ДополнительныеПараметры - Структура
&НаКлиенте
Процедура ПослеЗакрытияВопросаЗаполнитьКалендарь(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьКалендарьНаСервере();

	
КонецПроцедуры // ПослеЗакрытияВопросаЗаполнитьКалендарь()


//@skip-check module-structure-form-event-regions
&НаСервере
Процедура ЗаполнитьКалендарьНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодРегистрации",	ПериодРегистрации);
	Запрос.УстановитьПараметр("ВсегоЧеловек",	ВсегоЧеловек);
	Запрос.УстановитьПараметр("НочнаяСмена",	НочнаяСмена);
	
#Область ТекстЗапроса
Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	Номенклатура.Ссылка КАК Меню,
|	Номенклатура.ВидСтола КАК ВидСтола,
|	КатегорииМеню.НомерДняНедели КАК НомерДняНедели
|ПОМЕСТИТЬ ДействующиеМеню
|ИЗ
|	Справочник.Номенклатура КАК Номенклатура
|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КатегорииМеню КАК КатегорииМеню
|		ПО Номенклатура.КатегорияМеню = КатегорииМеню.Ссылка
|ГДЕ
|	Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.Меню)
|	И Номенклатура.ПометкаУдаления = ЛОЖЬ
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ДанныеПроизводственногоКалендаря.Дата КАК Дата,
|	ВидыСтолов.Ссылка КАК ВидСтола,
|	ДЕНЬНЕДЕЛИ(ДанныеПроизводственногоКалендаря.Дата) КАК НомерДняНедели,
|	ВидыСтолов.Порядок КАК Порядок
|ПОМЕСТИТЬ РасписаниеКалендаря
|ИЗ
|	РегистрСведений.ДанныеПроизводственногоКалендаря КАК ДанныеПроизводственногоКалендаря
|		ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.ВидыСтолов КАК ВидыСтолов
|		ПО (ИСТИНА)
|ГДЕ
|	ДанныеПроизводственногоКалендаря.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
|	И ДанныеПроизводственногоКалендаря.ПроизводственныйКалендарь.Наименование = ""Российская Федерация""
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	РасписаниеКалендаря.Дата КАК Дата,
|	РасписаниеКалендаря.ВидСтола КАК ВидСтола,
|	ЕСТЬNULL(ДействующиеМеню.Меню, ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)) КАК Меню,
|	ВЫБОР
|		КОГДА ДействующиеМеню.Меню ЕСТЬ NULL
|			ТОГДА 0
|		КОГДА РасписаниеКалендаря.ВидСтола = ЗНАЧЕНИЕ(Перечисление.ВидыСтолов.Обед)
|			ТОГДА &ВсегоЧеловек - &НочнаяСмена
|		КОГДА РасписаниеКалендаря.ВидСтола = ЗНАЧЕНИЕ(Перечисление.ВидыСтолов.ОбедНочь)
|			ТОГДА &НочнаяСмена
|		ИНАЧЕ &ВсегоЧеловек
|	КОНЕЦ КАК Количество,
|	РасписаниеКалендаря.НомерДняНедели КАК НомерДняНедели,
|	РасписаниеКалендаря.Порядок КАК Порядок
|ИЗ
|	РасписаниеКалендаря КАК РасписаниеКалендаря
|		ЛЕВОЕ СОЕДИНЕНИЕ ДействующиеМеню КАК ДействующиеМеню
|		ПО РасписаниеКалендаря.ВидСтола = ДействующиеМеню.ВидСтола
|			И РасписаниеКалендаря.НомерДняНедели = ДействующиеМеню.НомерДняНедели
|
|УПОРЯДОЧИТЬ ПО
|	Дата,
|	РасписаниеКалендаря.Порядок";
	
#КонецОбласти

	МенюПовтор = Неопределено;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Если Выборка.Порядок = 1 Тогда //для повторения обеда в ночь
			МенюПовтор = Выборка.Меню;
		КонецЕсли;
	
		НаборЗаписей = РегистрыСведений.КалендарьМеню.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Дата.Установить(Выборка.Дата);
		НаборЗаписей.Отбор.ВидСтола.Установить(Выборка.ВидСтола);
		
		ЗаписьРегистра = НаборЗаписей.Добавить();
		
		ЗаполнитьЗначенияСвойств(ЗаписьРегистра,Выборка);
		
		Если Выборка.Порядок = 3 Тогда  //записываем обед ночь
			ЗаписьРегистра.Меню = МенюПовтор;
		КонецЕсли;
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
	
	КонецЦикла;
	
	СтруктураПоказателей = Новый Структура;
	СтруктураПоказателей.Вставить("ПериодРегистрации",	ПериодРегистрации);
	СтруктураПоказателей.Вставить("ВсегоЧеловек",		ВсегоЧеловек);
	СтруктураПоказателей.Вставить("НочнаяСмена",		НочнаяСмена);
	
	СтоловаяФункцииПроцедуры.ЗаписатьПоказателиРаботыСтоловой(СтруктураПоказателей);
	
	УстановиьОтборДинамическихСписков();

КонецПроцедуры // ЗаполнитьКалендарьНаСервере()

&НаКлиенте
Процедура ОбновитьСоставМеню(Команда)
	ОбновитьСоставМенюНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура СформироватьПланПотребления(Команда)
	
	СформироватьПланПотребленияНаСервере();
	
	Элементы.ПланПотребления.Обновить();
	Элементы.ПланИзготовленияБлюда.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОстатки(Команда)
	РассчитатьОстаткиНаСервере();
КонецПроцедуры


&НаКлиенте
Процедура СформироватьРасход(Команда)
	
	МассивСтрок = Элементы.КалендарьМеню.ВыделенныеСтроки;
	СформироватьРасходНаСервере(МассивСтрок);
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

//// Возвращает строковое представление периода.
////
//// Параметры:
////  ПериодРегистрации - Дата   - Дата внутри месяца или квартала, представление которых нужно получить
////  КалендарныйПериод - Строка - "Месяц" или "Квартал".
////
//// Возвращаемое значение:
////  Строка - Представление месяца или квартала, внутри которых находится значение ПериодРегистрации.
////
//&НаКлиенте
//Функция ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации, КалендарныйПериод = "Месяц") 
//
//	Если КалендарныйПериод = "Месяц" Тогда
//		Возврат Формат(ПериодРегистрации, "ДФ='MMMM yyyy'")
//	ИначеЕсли КалендарныйПериод = "Квартал" Тогда
//		
//			Возврат СтрШаблон("%1 - %2",Формат(НачалоКвартала(ПериодРегистрации), "ДФ='MMMM yyyy'"),
//										Формат(КонецКвартала(ПериодРегистрации), "ДФ='MMMM yyyy'"));
//		
//	КонецЕсли;
//
//КонецФункции

// Увеличивает или уменьшает значение периода на одно значение.
//
// Параметры:
//  Направление                     - Число  - "1", если шагаем на следующий месяц, "-1", если шагаем в предыдущий месяц
//  СтандартнаяОбработка            - Булево - Признак стандартной обработки события
//  ПериодРегистрации               - Дата   - Переменная, в которую помещается значение следующего или предыдущего месяца
//  ПредставлениеПериодаРегистрации - Строка - Представление месяца ПериодаРегистрации.
//
&НаКлиенте
Процедура РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка, ПериодРегистрации, ПредставлениеПериодаРегистрации) 

	СтандартнаяОбработка = Ложь;

	Если Направление = 1 Тогда
		ПериодРегистрации = КонецМесяца(ПериодРегистрации) + 1;
	ИначеЕсли Направление = -1 Тогда
		ПериодРегистрации = НачалоМесяца(ПериодРегистрации - 1);
	КонецЕсли;
	
	СтруктураПоказателей = ПолучитьПоказателиРаботыСтоловой(ПериодРегистрации);
	ВсегоЧеловек = СтруктураПоказателей.ВсегоЧеловек;
	НочнаяСмена = СтруктураПоказателей.НочнаяСмена;

	ПредставлениеПериодаРегистрации = КонсолидацияФункцииКлиент.ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);

КонецПроцедуры


&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииНачалоВыбораЗавершение(ВыбранныйПериод, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныйПериод <> Неопределено И ПериодРегистрации <> ВыбранныйПериод Тогда
		
		ПериодРегистрации = ВыбранныйПериод;
		ПредставлениеПериодаРегистрации = КонсолидацияФункцииКлиент.ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);
		
		СтруктураПоказателей = ПолучитьПоказателиРаботыСтоловой(ПериодРегистрации);
		ВсегоЧеловек = СтруктураПоказателей.ВсегоЧеловек;
		НочнаяСмена = СтруктураПоказателей.НочнаяСмена;
		
		УстановиьОтборДинамическихСписков();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановиьОтборДинамическихСписков()
	
	УстановитьПараметрыДинамическихСписков();

	//Здесь отборы
	УстановитьОтборДинамическогоСпискаПоДатам(КалендарьМеню);
	УстановитьОтборДинамическогоСпискаПоДатам(ПланПотребления);
	УстановитьОтборДинамическогоСпискаПоДатам(ПланИзготовленияБлюда);
	УстановитьОтборДинамическогоСпискаПоДатам(РасходПродуктов);
	
КонецПроцедуры // УстановиьОтборДинамическихСписков()

&НаСервере
Процедура УстановитьОтборДинамическогоСпискаПоДатам(ДинамическийСписок)

	ДинамическийСписок.Отбор.Элементы.Очистить();
	
	ЭлементОтбора = ДинамическийСписок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	=  Новый ПолеКомпоновкиДанных("Дата");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
	ЭлементОтбора.ПравоеЗначение 	= НачалоМесяца(ПериодРегистрации);
	
	ЭлементОтбора = ДинамическийСписок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение 	=  Новый ПолеКомпоновкиДанных("Дата");
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
	ЭлементОтбора.ПравоеЗначение 	= КонецМесяца(ПериодРегистрации);


КонецПроцедуры // УстановитьОтборДинамическогоСпискаПоДатам()

&НаСервере
Процедура УстановитьПараметрыДинамическихСписков()

	  //Здесь параметры
	КалендарьИтоги.Параметры.УстановитьЗначениеПараметра("НачалоПериода",	НачалоМесяца(ПериодРегистрации));
	КалендарьИтоги.Параметры.УстановитьЗначениеПараметра("ОкончаниеПериода",КонецМесяца(ПериодРегистрации));

КонецПроцедуры // УстановитьПараметрыДинамическихСписков()

&НаСервереБезКонтекста
Функция СуществуютЗаписиРегистраКалендарьМеню(ПериодРегистрации)
	
	Если Не ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Истина)
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодРегистрации",ПериодРегистрации);
	Запрос.Текст = "ВЫБРАТЬ
	|	КалендарьМеню.Дата КАК Дата,
	|	КалендарьМеню.ВидСтола КАК ВидСтола,
	|	КалендарьМеню.Меню КАК Меню,
	|	КалендарьМеню.Количество КАК Количество
	|ИЗ
	|	РегистрСведений.КалендарьМеню КАК КалендарьМеню
	|ГДЕ
	|	КалендарьМеню.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КалендарьМеню.Дата КАК Дата,
	|	КалендарьМеню.ВидСтола КАК ВидСтола,
	|	КалендарьМеню.Меню КАК Меню,
	|	КалендарьМеню.Количество КАК Количество
	|ИЗ
	|	РегистрСведений.КалендарьМеню КАК КалендарьМеню
	|ГДЕ
	|	КалендарьМеню.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
	|	И (КалендарьМеню.ВидСтола = ЗНАЧЕНИЕ(Перечисление.ВидыСтолов.ПустаяСсылка)
	|			ИЛИ КалендарьМеню.Меню = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ИЛИ КалендарьМеню.Количество = 0)";
	
	Результат = Запрос.ВыполнитьПакет();
	Если Результат[0].Пустой() Тогда
		 Возврат Ложь  //записей нет
	КонецЕсли;
	
	Если Результат[1].Пустой() Тогда
		 Возврат Истина  //записи существуют и корректные
	 Иначе
		 Возврат Ложь    //записи существуют и есть ошибки
	КонецЕсли;

КонецФункции // СуществуютЗаписиРегистра()

&НаСервереБезКонтекста
Функция ПолучитьПоказателиРаботыСтоловой(ПериодРегистрации)

	Если Не ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Истина)
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПериодРегистрации",ПериодРегистрации);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПоказателиРаботыСтоловойСрезПоследних.ВсегоЧеловек КАК ВсегоЧеловек,
	|	ПоказателиРаботыСтоловойСрезПоследних.НочнаяСмена КАК НочнаяСмена
	|ИЗ
	|	РегистрСведений.ПоказателиРаботыСтоловой.СрезПоследних(&ПериодРегистрации, ) КАК ПоказателиРаботыСтоловойСрезПоследних";
	

	Результат = Запрос.Выполнить();
	
	СтруктураПоказателей = Новый Структура;
	Для  Каждого Колонка Из Результат.Колонки Цикл
		СтруктураПоказателей.Вставить(Колонка.Имя)
	КонецЦикла;
	
	Выборка = Результат.Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураПоказателей,Выборка)
	КонецЕсли;
	
	Возврат СтруктураПоказателей;
	
КонецФункции // ПолучитьПоказателиРаботыСтоловой()

&НаСервере
Процедура РассчитатьОстаткиНаСервере()
	
	Если Не ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Истина)
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаРасчета",НачалоДня(ТекущаяДатаСеанса()));
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПлановыйПотребленияПродуктов.Дата КАК Дата,
	|	ПлановыйПотребленияПродуктов.Номенклатура КАК Номенклатура,
	|	ПлановыйПотребленияПродуктов.Количество КАК Потребность,
	|	ПлановыйПотребленияПродуктов.КатегорияМеню КАК КатегорияМеню,
	|	СправочникНоменклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	РегистрСведений.ПлановыйПотребленияПродуктов КАК ПлановыйПотребленияПродуктов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ПлановыйПотребленияПродуктов.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	ПлановыйПотребленияПродуктов.Дата >= &ДатаРасчета
	|	И ПлановыйПотребленияПродуктов.ВидНоменклатуры = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.Продукты)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата,
	|	СправочникНоменклатура.Наименование
	|ИТОГИ ПО
	|	Дата
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиПродуктовНаСкладахОстатки.Номенклатура КАК Номенклатура,
	|	ОстаткиПродуктовНаСкладахОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.ОстаткиПродуктовНаСкладах.Остатки(, ) КАК ОстаткиПродуктовНаСкладахОстатки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ОстаткиПродуктовНаСкладахОстатки.Номенклатура = СправочникНоменклатура.Ссылка
	|			И (СправочникНоменклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.Продукты))
	|
	|УПОРЯДОЧИТЬ ПО
	|	СправочникНоменклатура.Наименование";
	
	
	Результат = Запрос.ВыполнитьПакет();
	СтрокиДерева = ДеревоОстатков.ПолучитьЭлементы();
	СтрокиДерева.Очистить();
	
	ВыборкаПотребность = Результат[0].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ТаблицаОстатки = Результат[1].Выгрузить();
	
	Пока ВыборкаПотребность.Следующий() Цикл
	    СтрокаДата = СтрокиДерева.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДата,ВыборкаПотребность); 
		
		
		СтрокиНоменклатура = СтрокаДата.ПолучитьЭлементы();
		Выборка = ВыборкаПотребность.Выбрать();
		Пока Выборка.Следующий() Цикл
			
		    СтрокаНоменклатура = СтрокиНоменклатура.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаНоменклатура,Выборка,"Номенклатура,Потребность,ЕдиницаИзмерения");
			
			СтруктураПоиска = Новый Структура("Номенклатура",Выборка.Номенклатура);
			
			НайденныеСтроки = ТаблицаОстатки.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() > 0 Тогда
			
				 СтрокаНоменклатура.Остаток = НайденныеСтроки[0].Количество;
				 
				 НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество - СтрокаНоменклатура.Потребность;
				 Если НайденныеСтроки[0].Количество < 0 Тогда
				 	 НайденныеСтроки[0].Количество = 0;
				 КонецЕсли;
			
			КонецЕсли;
			
			Если СтрокаНоменклатура.Потребность > СтрокаНоменклатура.Остаток Тогда
				СтрокаНоменклатура.Нехватка =  СтрокаНоменклатура.Потребность - СтрокаНоменклатура.Остаток
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСоставМенюНаСервере()
	
	Запрос = Новый Запрос;
	
#Область ТекстЗапроса
Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	КатегорииМеню.Ссылка КАК Ссылка,
|	КатегорииМеню.Наименование КАК Наименование
|ПОМЕСТИТЬ КатегорииМеню
|ИЗ
|	Справочник.КатегорииМеню КАК КатегорииМеню
|ГДЕ
|	КатегорииМеню.ПометкаУдаления = ЛОЖЬ
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВидыСтолов.Ссылка КАК Ссылка,
|	ВидыСтолов.Порядок КАК Порядок
|ПОМЕСТИТЬ ВидыСтолов
|ИЗ
|	Перечисление.ВидыСтолов КАК ВидыСтолов
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	КатегорииМеню.Ссылка КАК КатегорияМеню,
|	ВидыСтолов.Ссылка КАК ВидСтола
|ПОМЕСТИТЬ ТаблицаКатегорий
|ИЗ
|	КатегорииМеню КАК КатегорииМеню
|		ЛЕВОЕ СОЕДИНЕНИЕ ВидыСтолов КАК ВидыСтолов
|		ПО (ИСТИНА)
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	Номенклатура.Ссылка КАК Ссылка,
|	Номенклатура.КатегорияМеню КАК КатегорияМеню,
|	Номенклатура.ВидСтола КАК ВидСтола
|ПОМЕСТИТЬ СсылкиМеню
|ИЗ
|	Справочник.Номенклатура КАК Номенклатура
|ГДЕ
|	Номенклатура.ВидНоменклатуры = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.Меню)
|	И Номенклатура.ПометкаУдаления = ЛОЖЬ
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	НоменклатураСоставНабора.Ссылка КАК Меню,
|	НоменклатураСоставНабора.НомерСтроки КАК НомерСтроки,
|	НоменклатураСоставНабора.Номенклатура КАК Номенклатура,
|	НоменклатураСоставНабора.Количество КАК Количество,
|	НоменклатураСоставНабора.кКал КАК кКал
|ПОМЕСТИТЬ СоставыМеню
|ИЗ
|	Справочник.Номенклатура.СоставНабора КАК НоменклатураСоставНабора
|ГДЕ
|	НоменклатураСоставНабора.Ссылка В
|			(ВЫБРАТЬ
|				СсылкиМеню.Ссылка КАК Ссылка
|			ИЗ
|				СсылкиМеню КАК СсылкиМеню)
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ТаблицаКатегорий.КатегорияМеню КАК КатегорияМеню,
|	ТаблицаКатегорий.ВидСтола КАК ВидСтола,
|	СсылкиМеню.Ссылка КАК Меню
|ПОМЕСТИТЬ Предварительная
|ИЗ
|	ТаблицаКатегорий КАК ТаблицаКатегорий
|		ЛЕВОЕ СОЕДИНЕНИЕ СсылкиМеню КАК СсылкиМеню
|		ПО ТаблицаКатегорий.КатегорияМеню = СсылкиМеню.КатегорияМеню
|			И ТаблицаКатегорий.ВидСтола = СсылкиМеню.ВидСтола
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	КатегорииМеню.Ссылка КАК КатегорияМеню,
|	КатегорииМеню.Наименование КАК Наименование
|ИЗ
|	КатегорииМеню КАК КатегорииМеню
|
|УПОРЯДОЧИТЬ ПО
|	Наименование
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ВидыСтолов.Ссылка КАК ВидСтола,
|	ВидыСтолов.Порядок КАК Порядок
|ИЗ
|	ВидыСтолов КАК ВидыСтолов
|
|УПОРЯДОЧИТЬ ПО
|	Порядок
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	Предварительная.КатегорияМеню КАК КатегорияМеню,
|	Предварительная.ВидСтола КАК ВидСтола,
|	Предварительная.Меню КАК Меню,
|	СоставыМеню.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
|	СоставыМеню.НомерСтроки КАК НомерСтроки,
|	СоставыМеню.Номенклатура КАК Блюдо,
|	СоставыМеню.Количество КАК Количество,
|	СоставыМеню.кКал КАК кКал
|ИЗ
|	Предварительная КАК Предварительная
|		ЛЕВОЕ СОЕДИНЕНИЕ СоставыМеню КАК СоставыМеню
|		ПО Предварительная.Меню = СоставыМеню.Меню
|ГДЕ
|	НЕ СоставыМеню.Номенклатура ЕСТЬ NULL
|
|УПОРЯДОЧИТЬ ПО
|	КатегорияМеню,
|	ВидСтола,
|	НомерСтроки";
	
#КонецОбласти 

	Результат = Запрос.ВыполнитьПакет();

	ВГраница = Результат.ВГраница();

	СтрокиКатегории  = СоставМеню.ПолучитьЭлементы();
	СтрокиКатегории.Очистить();

	//Категории
	ВыборкаКатегория = Результат[ВГраница-2].Выбрать();
	ВыборкаСтолы =   Результат[ВГраница-1].Выбрать();
	Выборка = Результат[ВГраница].Выбрать();


	Пока ВыборкаКатегория.Следующий() Цикл
		СтрокаКатегория = СтрокиКатегории.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаКатегория,ВыборкаКатегория);
		
		СтрокиСтолы = СтрокаКатегория.ПолучитьЭлементы();
		ВыборкаСтолы.Сбросить();
		
		Пока ВыборкаСтолы.Следующий() Цикл
		    СтрокаСтол = СтрокиСтолы.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаСтол,ВыборкаСтолы);
			
			СтрокиБлюда = СтрокаСтол.ПолучитьЭлементы();
			СтруктураПоиска = Новый Структура("КатегорияМеню,ВидСтола",ВыборкаКатегория.КатегорияМеню,ВыборкаСтолы.ВидСтола);
			Выборка.Сбросить();
			Пока Выборка.НайтиСледующий(СтруктураПоиска) Цикл
			    ЗаполнитьЗначенияСвойств(СтрокиБлюда.Добавить(),Выборка,,"КатегорияМеню,ВидСтола,Меню");
				
				СтрокаСтол.Меню = Выборка.Меню;//для обработки расшифровки
			
			КонецЦикла;
			
		КонецЦикла;
	КонецЦикла;	


КонецПроцедуры

&НаСервере
Процедура СформироватьРасходНаСервере(МассивСтрок)

	Если Не ПривилегированныйРежим() Тогда
		УстановитьПривилегированныйРежим(Истина)
	КонецЕсли;
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("Дата" ,Новый ОписаниеТипов("Дата"));
	ТаблицаЗначений.Колонки.Добавить("ВидСтола" ,Новый ОписаниеТипов("ПеречислениеСсылка.ВидыСтолов"));
	
	Для каждого ВыделеннаяСтрока Из МассивСтрок Цикл
		Если  ТипЗнч(ВыделеннаяСтрока) =Тип("РегистрСведенийКлючЗаписи.КалендарьМеню") Тогда
			ЗаполнитьЗначенияСвойств(ТаблицаЗначений.Добавить(),ВыделеннаяСтрока)
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаЗначений",ТаблицаЗначений);
	
#Область ТекстЗапроса
	Запрос.Текст = "ВЫБРАТЬ
	               |	КалендарьМеню.Дата КАК Дата,
	               |	КалендарьМеню.ВидСтола КАК ВидСтола
	               |ПОМЕСТИТЬ ТаблицаЗначений
	               |ИЗ
	               |	&ТаблицаЗначений КАК КалендарьМеню
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	КалендарьМеню.Дата КАК Дата,
	               |	КалендарьМеню.ВидСтола КАК ВидСтола,
	               |	КалендарьМеню.Меню КАК Меню,
	               |	КалендарьМеню.Количество КАК Количество
	               |ПОМЕСТИТЬ ТаблицаКалендарь
	               |ИЗ
	               |	РегистрСведений.КалендарьМеню КАК КалендарьМеню
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаЗначений КАК ТаблицаЗначений
	               |		ПО КалендарьМеню.Дата = ТаблицаЗначений.Дата
	               |			И КалендарьМеню.ВидСтола = ТаблицаЗначений.ВидСтола
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	РасходПродуктов.Ссылка КАК Ссылка,
	               |	НАЧАЛОПЕРИОДА(РасходПродуктов.Дата, ДЕНЬ) КАК Дата,
	               |	РасходПродуктов.ВидСтола КАК ВидСтола
	               |ИЗ
	               |	Документ.РасходПродуктов КАК РасходПродуктов
	               |ГДЕ
	               |	(НАЧАЛОПЕРИОДА(РасходПродуктов.Дата, ДЕНЬ), РасходПродуктов.ВидСтола) В
	               |			(ВЫБРАТЬ
	               |				ТаблицаКалендарь.Дата КАК Дата,
	               |				ТаблицаКалендарь.ВидСтола КАК ВидСтола
	               |			ИЗ
	               |				ТаблицаКалендарь КАК ТаблицаКалендарь)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата,
	               |	РасходПродуктов.ВидСтола.Порядок
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ТаблицаКалендарь.Дата КАК Дата,
	               |	ТаблицаКалендарь.ВидСтола КАК ВидСтола,
	               |	ТаблицаКалендарь.Меню КАК Меню,
	               |	ТаблицаКалендарь.Количество КАК Количество
	               |ИЗ
	               |	ТаблицаКалендарь КАК ТаблицаКалендарь
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Дата,
	               |	ТаблицаКалендарь.ВидСтола.Порядок";
	
#КонецОбласти

	Результат 	= Запрос.ВыполнитьПакет();
	ВГраница 	= Результат.ВГраница();
	
	Выборка = Результат[ВГраница].Выбрать();
	ВыборкаДокумент = Результат[ВГраница -1].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СтруктураПоиска = Новый Структура("Дата,ВидСтола",Выборка.Дата,Выборка.ВидСтола);
		
		ВыборкаДокумент.Сбросить();
		Если ВыборкаДокумент.НайтиСледующий(СтруктураПоиска) Тогда
			ДокументОбъект = ВыборкаДокумент.Ссылка.ПолучитьОбъект();
		Иначе
			ДокументОбъект = Документы.РасходПродуктов.СоздатьДокумент();
			ДокументОбъект.УстановитьНовыйНомер();
		КонецЕсли;
		
		СтруктураЗаполнения = Новый Структура;
		СтруктураЗаполнения.Вставить("ИзКалендаря",	Истина);
		СтруктураЗаполнения.Вставить("Дата",		Выборка.Дата);
		СтруктураЗаполнения.Вставить("ВидСтола",	Выборка.ВидСтола);
		СтруктураЗаполнения.Вставить("Номенклатура",Выборка.Меню);
		СтруктураЗаполнения.Вставить("Количество",	Выборка.Количество);
		
		ДокументОбъект.Заполнить(СтруктураЗаполнения);
		
		ДокументОбъект.ПометкаУдаления 	= Ложь;
		ДокументОбъект.Проведен 		= Ложь;
		
		ДокументОбъект.ОбменДанными.Загрузка = Истина;
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры                                                                                        


&НаСервере
Процедура СформироватьПланПотребленияНаСервере()
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ПериодРегистрации",	ПериодРегистрации);
	
#Область ТекстЗапроса
Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
|	ПлановыйПотребленияПродуктов.Дата КАК Дата
|ИЗ
|	РегистрСведений.ПлановыйПотребленияПродуктов КАК ПлановыйПотребленияПродуктов
|ГДЕ
|	ПлановыйПотребленияПродуктов.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)";
	
#КонецОбласти

	Выборка = Запрос.Выполнить().Выбрать();
	//Очистка РС
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ПлановыйПотребленияПродуктов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Дата.Установить(Выборка.Дата);
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
	КонецЦикла;
	
#Область ТекстЗапроса
Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	КалендарьМеню.Меню КАК Меню,
|	СУММА(КалендарьМеню.Количество) КАК Количество,
|	КалендарьМеню.Дата КАК Дата,
|	СправочникНоменклатура.КатегорияМеню КАК КатегорияМеню
|ПОМЕСТИТЬ ТаблицаМеню
|ИЗ
|	РегистрСведений.КалендарьМеню КАК КалендарьМеню
|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
|		ПО КалендарьМеню.Меню = СправочникНоменклатура.Ссылка
|ГДЕ
|	КалендарьМеню.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&ПериодРегистрации, МЕСЯЦ) И КОНЕЦПЕРИОДА(&ПериодРегистрации, МЕСЯЦ)
|	И НЕ КалендарьМеню.Меню = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
|
|СГРУППИРОВАТЬ ПО
|	КалендарьМеню.Меню,
|	КалендарьМеню.Дата,
|	СправочникНоменклатура.КатегорияМеню
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	НоменклатураСоставНабора.Ссылка КАК Меню,
|	НоменклатураСоставНабора.Номенклатура КАК Номенклатура,
|	НоменклатураСоставНабора.Количество КАК Количество,
|	СправочникНоменклатура.ВидНоменклатуры КАК ВидНоменклатуры,
|	НоменклатураМеню.КатегорияМеню КАК КатегорияМеню
|ПОМЕСТИТЬ ТаблицаСоставМеню
|ИЗ
|	Справочник.Номенклатура.СоставНабора КАК НоменклатураСоставНабора
|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
|		ПО НоменклатураСоставНабора.Номенклатура = СправочникНоменклатура.Ссылка
|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК НоменклатураМеню
|		ПО НоменклатураСоставНабора.Ссылка = НоменклатураМеню.Ссылка
|ГДЕ
|	НоменклатураСоставНабора.Ссылка В
|			(ВЫБРАТЬ
|				ТаблицаМеню.Меню КАК Меню
|			ИЗ
|				ТаблицаМеню КАК ТаблицаМеню)
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ТаблицаСоставМеню.Номенклатура КАК Номенклатура,
|	ТаблицаСоставМеню.ВидНоменклатуры КАК ВидНоменклатуры,
|	СУММА(ТаблицаСоставМеню.Количество * ТаблицаМеню.Количество) КАК Количество,
|	ТаблицаМеню.Дата КАК Дата,
|	ТаблицаСоставМеню.КатегорияМеню КАК КатегорияМеню
|ПОМЕСТИТЬ ТаблицаБлюда
|ИЗ
|	ТаблицаСоставМеню КАК ТаблицаСоставМеню
|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМеню КАК ТаблицаМеню
|		ПО ТаблицаСоставМеню.Меню = ТаблицаМеню.Меню
|			И (ТаблицаСоставМеню.ВидНоменклатуры = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.Блюда))
|
|СГРУППИРОВАТЬ ПО
|	ТаблицаСоставМеню.Номенклатура,
|	ТаблицаСоставМеню.ВидНоменклатуры,
|	ТаблицаМеню.Дата,
|	ТаблицаСоставМеню.КатегорияМеню
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ТаблицаСоставМеню.Номенклатура КАК Номенклатура,
|	ТаблицаСоставМеню.ВидНоменклатуры КАК ВидНоменклатуры,
|	СУММА(ТаблицаСоставМеню.Количество * ТаблицаМеню.Количество) КАК Количество,
|	ТаблицаМеню.Дата КАК Дата,
|	ТаблицаСоставМеню.КатегорияМеню КАК КатегорияМеню
|ПОМЕСТИТЬ ТаблицаПродуктыИзМеню
|ИЗ
|	ТаблицаСоставМеню КАК ТаблицаСоставМеню
|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаМеню КАК ТаблицаМеню
|		ПО ТаблицаСоставМеню.Меню = ТаблицаМеню.Меню
|			И (ТаблицаСоставМеню.ВидНоменклатуры = ЗНАЧЕНИЕ(Справочник.ВидыНоменклатуры.Продукты))
|
|СГРУППИРОВАТЬ ПО
|	ТаблицаСоставМеню.Номенклатура,
|	ТаблицаСоставМеню.ВидНоменклатуры,
|	ТаблицаМеню.Дата,
|	ТаблицаСоставМеню.КатегорияМеню
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ РАЗРЕШЕННЫЕ
|	НоменклатураСоставНабора.Номенклатура КАК Номенклатура,
|	НоменклатураСоставНабора.Номенклатура.ВидНоменклатуры КАК ВидНоменклатуры,
|	СУММА(ТаблицаБлюда.Количество * НоменклатураСоставНабора.Количество / СправочникНоменклатура.КоличествоБлюд) КАК Количество,
|	ТаблицаБлюда.Дата КАК Дата,
|	ТаблицаБлюда.КатегорияМеню КАК КатегорияМеню
|ПОМЕСТИТЬ ТаблицаПродуктыИзБлюд
|ИЗ
|	Справочник.Номенклатура.СоставНабора КАК НоменклатураСоставНабора
|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТаблицаБлюда КАК ТаблицаБлюда
|		ПО НоменклатураСоставНабора.Ссылка = ТаблицаБлюда.Номенклатура
|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
|		ПО НоменклатураСоставНабора.Ссылка = СправочникНоменклатура.Ссылка
|ГДЕ
|	НоменклатураСоставНабора.Ссылка В
|			(ВЫБРАТЬ
|				ТаблицаБлюда.Номенклатура КАК Номенклатура
|			ИЗ
|				ТаблицаБлюда КАК ТаблицаБлюда)
|
|СГРУППИРОВАТЬ ПО
|	НоменклатураСоставНабора.Номенклатура,
|	ТаблицаБлюда.Дата,
|	НоменклатураСоставНабора.Номенклатура.ВидНоменклатуры,
|	ТаблицаБлюда.КатегорияМеню
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	ТаблицаБлюда.Номенклатура КАК Номенклатура,
|	ТаблицаБлюда.ВидНоменклатуры КАК ВидНоменклатуры,
|	ТаблицаБлюда.Количество КАК Количество,
|	ТаблицаБлюда.Дата КАК Дата,
|	ТаблицаБлюда.КатегорияМеню КАК КатегорияМеню
|ПОМЕСТИТЬ Подготовительная
|ИЗ
|	ТаблицаБлюда КАК ТаблицаБлюда
|
|ОБЪЕДИНИТЬ ВСЕ
|
|ВЫБРАТЬ
|	ТаблицаПродуктыИзМеню.Номенклатура,
|	ТаблицаПродуктыИзМеню.ВидНоменклатуры,
|	ТаблицаПродуктыИзМеню.Количество,
|	ТаблицаПродуктыИзМеню.Дата,
|	ТаблицаПродуктыИзМеню.КатегорияМеню
|ИЗ
|	ТаблицаПродуктыИзМеню КАК ТаблицаПродуктыИзМеню
|
|ОБЪЕДИНИТЬ ВСЕ
|
|ВЫБРАТЬ
|	ТаблицаПродуктыИзБлюд.Номенклатура,
|	ТаблицаПродуктыИзБлюд.ВидНоменклатуры,
|	ТаблицаПродуктыИзБлюд.Количество,
|	ТаблицаПродуктыИзБлюд.Дата,
|	ТаблицаПродуктыИзБлюд.КатегорияМеню
|ИЗ
|	ТаблицаПродуктыИзБлюд КАК ТаблицаПродуктыИзБлюд
|;
|
|////////////////////////////////////////////////////////////////////////////////
|ВЫБРАТЬ
|	Подготовительная.Номенклатура КАК Номенклатура,
|	Подготовительная.ВидНоменклатуры КАК ВидНоменклатуры,
|	СУММА(Подготовительная.Количество) КАК Количество,
|	Подготовительная.Дата КАК Дата,
|	Подготовительная.КатегорияМеню КАК КатегорияМеню
|ИЗ
|	Подготовительная КАК Подготовительная
|
|СГРУППИРОВАТЬ ПО
|	Подготовительная.Номенклатура,
|	Подготовительная.ВидНоменклатуры,
|	Подготовительная.Дата,
|	Подготовительная.КатегорияМеню";
#КонецОбласти

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.ПлановыйПотребленияПродуктов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Дата.Установить(Выборка.Дата);
		НаборЗаписей.Отбор.Номенклатура.Установить(Выборка.Номенклатура);
		НаборЗаписей.Отбор.ВидНоменклатуры.Установить(Выборка.ВидНоменклатуры);
		
		ЗаполнитьЗначенияСвойств(НаборЗаписей.Добавить(),Выборка);
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
	КонецЦикла;

	                                                                                          
КонецПроцедуры // СформироватьПланПотребленияНаСервере()

#КонецОбласти 
