////////////////////////////////////////////////////////////////////////////////
// <Заголовок модуля: краткое описание и условия применения модуля.>
//  
////////////////////////////////////////////////////////////////////////////////
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Функция ВыполнитьЗаменуЭлементов(ЗначениеОбъекта) Экспорт
		
	Заменяемые		= ЗначениеОбъекта.ЗаменяемыеЗначения;
	ТаблицаСсылок	= ЗначениеОбъекта.НайденныеСсылки;
	Пояснять		= ЗначениеОбъекта.ПояснятьПроцесс;
	ВТранзакции		= ЗначениеОбъекта.ВыполнятьВТранзакции;
	БезКонтроля		= ЗначениеОбъекта.ОтключатьКонтрольЗаписи;
	
	ТаблицаСсылок.Колонки.Добавить("Метаданные");	
	Для Каждого СтрокаНайденныеСсылки Из ТаблицаСсылок Цикл
		СтрокаНайденныеСсылки.Метаданные = Метаданные.НайтиПоПолномуИмени(СтрокаНайденныеСсылки.ПредставлениеМетаданных);
	КонецЦикла;	
	
	БылиИсключения = Ложь;
	
	Если ВТранзакции Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	ОбрабатываемаяСсылка = Неопределено;
		                 
	Параметры = Новый Структура;
	
	Для Каждого РегистрБухгалтерии ИЗ Метаданные.РегистрыБухгалтерии Цикл
		Параметры.Вставить(РегистрБухгалтерии.Имя+"Субконто", РегистрБухгалтерии.ПланСчетов.МаксКоличествоСубконто);
		Параметры.Вставить(РегистрБухгалтерии.Имя+"Корреспонденция", РегистрБухгалтерии.Корреспонденция);		
	КонецЦикла;
	
	Параметры.Вставить("Объект", Неопределено);	
		
	Для Каждого СтрокаТаблицы Из ТаблицаСсылок Цикл
		
		ПравильныйЭлемент = Заменяемые[СтрокаТаблицы.Ссылка];
		
		Ссылка = СтрокаТаблицы.Ссылка;
		
		// Если обрабатывается тот же объект, что и в прошлой итерации, то пропускаем его запись.
		Если ОбрабатываемаяСсылка <> СтрокаТаблицы.Данные Тогда
			Если ОбрабатываемаяСсылка <> Неопределено и Параметры.Объект <> Неопределено Тогда
				
				Если БезКонтроля Тогда
					Параметры.Объект.ОбменДанными.Загрузка = Истина;
				КонецЕсли;
				
				Попытка
					Параметры.Объект.Записать();
					ПояснитьДействие(Пояснять, "Объект "+ОбрабатываемаяСсылка+" ("+ТипЗнч(ОбрабатываемаяСсылка)+") обрабатан");
				Исключение
					СообщитьОбОшибкеПриЗаписи(ИнформацияОбОшибке(), БылиИсключения);
					ЗакончитьТранзакцию(ВТранзакции);
					Если ВТранзакции Тогда
						Возврат Не БылиИсключения;
					КонецЕсли;
				КонецПопытки;
				Параметры.Объект = Неопределено;
			КонецЕсли;
			ОбрабатываемаяСсылка = СтрокаТаблицы.Данные;
			
		КонецЕсли;
		
		ПояснитьДействие(Пояснять, "Обрабатывается "+ОбрабатываемаяСсылка+" ("+ТипЗнч(ОбрабатываемаяСсылка)+")");	
			
		Если Метаданные.Документы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Если Параметры.Объект = Неопределено Тогда
				Параметры.Объект = ОбрабатываемаяСсылка.ПолучитьОбъект();
			КонецЕсли;
			
			Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И Параметры.Объект[Реквизит.Имя] = Ссылка Тогда
					Параметры.Объект[Реквизит.Имя] = ПравильныйЭлемент;
					ПояснитьДействие(Пояснять, "В "+Параметры.Объект+" ссылка на "+Ссылка+" ("+ТипЗнч(Ссылка)+") заменена на "+ПравильныйЭлемент+" ("+ТипЗнч(ПравильныйЭлемент)+") в реквизите шапки """+Реквизит.Синоним+"""");
				КонецЕсли;
			КонецЦикла;
				
			Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
							ПояснитьДействие(Пояснять, "В "+Параметры.Объект+" ссылка на "+Ссылка+" ("+ТипЗнч(Ссылка)+") заменена на "+ПравильныйЭлемент+" ("+ТипЗнч(ПравильныйЭлемент)+") в реквизите """+Реквизит.Синоним+""" табличной части """+ТЧ.Синоним+"""");	
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Для Каждого Движение ИЗ СтрокаТаблицы.Метаданные.Движения Цикл
				
				ЭтоДвижениеРегистраБухгалтерии = Метаданные.РегистрыБухгалтерии.Содержит(Движение);
				ЕстьКорреспонденция = ЭтоДвижениеРегистраБухгалтерии и Параметры[Движение.Имя + "Корреспонденция"];
				
				НаборЗаписей  = Параметры.Объект.Движения[Движение.Имя];
				НаборЗаписей.Прочитать();
				НадоЗаписывать = Ложь;
				ТаблицаНабора = НаборЗаписей.Выгрузить();
				
				Если ТаблицаНабора.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				масИменКолонок = Новый Массив;
				
				// Получим имена измерений, которые могут содержать ссылку
				Для Каждого Измерение ИЗ Движение.Измерения Цикл
					Если Измерение.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						Если (Измерение.Имя = "Валюта" Или Измерение.Имя = "КПС" Или Измерение.Имя = "КЭК" Или Измерение.Имя = "Подразделение") И ЕстьКорреспонденция Тогда
							масИменКолонок.Добавить(Измерение.Имя + "Дт");
							масИменКолонок.Добавить(Измерение.Имя + "Кт");						
						Иначе
							масИменКолонок.Добавить(Измерение.Имя);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
						
				// Получим имена ресурсов, которые могут содержать ссылку
				Если Метаданные.РегистрыСведений.Содержит(Движение) Тогда
					Для Каждого Ресурс ИЗ Движение.Ресурсы Цикл
						Если Ресурс.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
							масИменКолонок.Добавить(Ресурс.Имя);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
						
				// Получим имена ресурсов, которые могут содержать ссылку
				Для Каждого Реквизит ИЗ Движение.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						масИменКолонок.Добавить(Реквизит.Имя);
					КонецЕсли;
				КонецЦикла;
				
				// Произведем замены в таблице
				Для Каждого ИмяКолонки Из масИменКолонок Цикл
					СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, ИмяКолонки);
					Пока СтрокаТабЧасти <> Неопределено Цикл
						СтрокаТабЧасти[ИмяКолонки] = ПравильныйЭлемент;
						НадоЗаписывать = Истина;
						СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, ИмяКолонки);
						ПояснитьДействие(Пояснять, "В движениях "+Параметры.Объект+" ("+СтрЗаменить(СокрЛП(ТипЗнч(НаборЗаписей))," набор записей","")+") ссылка на "+Ссылка+" ("+ТипЗнч(Ссылка)+") заменена на "+ПравильныйЭлемент+" ("+ТипЗнч(ПравильныйЭлемент)+") в измерении """+ИмяКолонки+"""");	
					КонецЦикла;
				КонецЦикла;
				
				Если Метаданные.РегистрыБухгалтерии.Содержит(Движение) Тогда
					
					Для ИндексСубконто = 1 по Параметры[Движение.Имя + "Субконто"] Цикл
						Если ЕстьКорреспонденция Тогда
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоДт"+ИндексСубконто);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти["СубконтоДт"+ИндексСубконто] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоДт"+ИндексСубконто);
								ПояснитьДействие(Пояснять, "В движениях "+Параметры.Объект+" ("+СтрЗаменить(СокрЛП(ТипЗнч(НаборЗаписей))," набор записей","")+") ссылка на "+Ссылка+" ("+ТипЗнч(Ссылка)+") заменена на "+ПравильныйЭлемент+" ("+ТипЗнч(ПравильныйЭлемент)+") в субконто Дт №"+ИндексСубконто);	
							КонецЦикла;
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоКт"+ИндексСубконто);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти["СубконтоКт"+ИндексСубконто] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "СубконтоКт"+ИндексСубконто);
								ПояснитьДействие(Пояснять, "	В движениях "+Параметры.Объект+" ("+СтрЗаменить(СокрЛП(ТипЗнч(НаборЗаписей))," набор записей","")+") ссылка на "+Ссылка+" ("+ТипЗнч(Ссылка)+") заменена на "+ПравильныйЭлемент+" ("+ТипЗнч(ПравильныйЭлемент)+") в субконто Кт №"+ИндексСубконто);	
							КонецЦикла;								
						Иначе							
							СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "Субконто"+ИндексСубконто);
							Пока СтрокаТабЧасти <> Неопределено Цикл
								СтрокаТабЧасти["Субконто"+ИндексСубконто] = ПравильныйЭлемент;
								НадоЗаписывать = Истина;
								СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "Субконто"+ИндексСубконто);
								ПояснитьДействие(Пояснять, "В движениях "+Параметры.Объект+" ("+СтрЗаменить(СокрЛП(ТипЗнч(НаборЗаписей))," набор записей","")+") ссылка на "+Ссылка+" ("+ТипЗнч(Ссылка)+") заменена на "+ПравильныйЭлемент+" ("+ТипЗнч(ПравильныйЭлемент)+") в субконто №"+ИндексСубконто);	
							КонецЦикла;							
						КонецЕсли;						
					КонецЦикла;
					
					//Меняем счета
					Если Ссылка.Метаданные() = Движение.ПланСчетов Тогда
						Для Каждого СтрокаТабЧасти Из ТаблицаНабора Цикл
							Если ЕстьКорреспонденция Тогда
								Если СтрокаТабЧасти.СчетДт = Ссылка Тогда
									СтрокаТабЧасти.СчетДт = ПравильныйЭлемент;
									ПояснитьДействие(Пояснять, "В движениях "+Параметры.Объект+" ("+СтрЗаменить(СокрЛП(ТипЗнч(НаборЗаписей))," набор записей","")+") в счете дебета ссылка на "+Ссылка+" ("+ТипЗнч(Ссылка)+") заменена на "+ПравильныйЭлемент+" ("+ТипЗнч(ПравильныйЭлемент)+")");	
									НадоЗаписывать = Истина;
								КонецЕсли;
								Если СтрокаТабЧасти.СчетКт = Ссылка Тогда
									СтрокаТабЧасти.СчетКт = ПравильныйЭлемент;
									ПояснитьДействие(Пояснять, "В движениях "+Параметры.Объект+" ("+СтрЗаменить(СокрЛП(ТипЗнч(НаборЗаписей))," набор записей","")+") в счете кредита ссылка на "+Ссылка+" ("+ТипЗнч(Ссылка)+") заменена на "+ПравильныйЭлемент+" ("+ТипЗнч(ПравильныйЭлемент)+")");
									НадоЗаписывать = Истина;
								КонецЕсли;
							Иначе
								Если СтрокаТабЧасти.Счет = Ссылка Тогда
									СтрокаТабЧасти.Счет = ПравильныйЭлемент;
									ПояснитьДействие(Пояснять, "В движениях "+Параметры.Объект+" ("+СтрЗаменить(СокрЛП(ТипЗнч(НаборЗаписей))," набор записей","")+") в счете ссылка на "+Ссылка+" ("+ТипЗнч(Ссылка)+") заменена на "+ПравильныйЭлемент+" ("+ТипЗнч(ПравильныйЭлемент)+")");
									НадоЗаписывать = Истина;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
				Если Метаданные.РегистрыРасчета.Содержит(Движение) Тогда
					СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "ВидРасчета");
					Пока СтрокаТабЧасти <> Неопределено Цикл
						СтрокаТабЧасти["ВидРасчета"] = ПравильныйЭлемент;
						ПояснитьДействие(Пояснять, "В "+Параметры.Объект+" ("+СтрЗаменить(СокрЛП(ТипЗнч(НаборЗаписей))," набор записей","")+") вид расчета "+Ссылка+" ("+ТипЗнч(Ссылка)+") заменен на "+ПравильныйЭлемент+" ("+ТипЗнч(ПравильныйЭлемент)+")");
						НадоЗаписывать = Истина;
						СтрокаТабЧасти = ТаблицаНабора.Найти(Ссылка, "ВидРасчета");
					КонецЦикла;
				КонецЕсли;
				
				Если НадоЗаписывать Тогда
					НаборЗаписей.Загрузить(ТаблицаНабора);
					Если БезКонтроля Тогда
						НаборЗаписей.ОбменДанными.Загрузка = Истина;
					КонецЕсли;
					Попытка
						НаборЗаписей.Записать();
					Исключение
						СообщитьОбОшибкеПриЗаписи(ИнформацияОбОшибке(), БылиИсключения);
						ЗакончитьТранзакцию(ВТранзакции);
						Если ВТранзакции Тогда
							Возврат Не БылиИсключения;
						КонецЕсли;
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
			
			
			Для Каждого Последовательность ИЗ Метаданные.Последовательности Цикл
				Если Последовательность.Документы.Содержит(СтрокаТаблицы.Метаданные) Тогда
					НадоЗаписывать = Ложь;
					НаборЗаписи = Последовательности[Последовательность.Имя].СоздатьНаборЗаписей();
					НаборЗаписи.Отбор.Регистратор.Установить(ОбрабатываемаяСсылка);
					НаборЗаписи.Прочитать();
					
					Если НаборЗаписи.Количество() > 0 Тогда
						Для Каждого Измерение ИЗ Последовательность.Измерения Цикл
							Если Измерение.Тип.СодержитТип(ТипЗнч(Ссылка)) И НаборЗаписи[0][Измерение.Имя]=Ссылка Тогда
								НаборЗаписи[0][Измерение.Имя] = ПравильныйЭлемент;
								ПояснитьДействие(Пояснять, "В "+Параметры.Объект+" ссылка на "+Ссылка+" ("+ТипЗнч(Ссылка)+") заменена на "+ПравильныйЭлемент+" ("+ТипЗнч(ПравильныйЭлемент)+")");
								НадоЗаписывать = Истина;
							КонецЕсли;
						КонецЦикла;					
						Если НадоЗаписывать Тогда
							Если БезКонтроля Тогда
								НаборЗаписи.ОбменДанными.Загрузка = Истина;
							КонецЕсли;
							Попытка
								НаборЗаписи.Записать();
							Исключение
								СообщитьОбОшибкеПриЗаписи(ИнформацияОбОшибке(), БылиИсключения);
								ЗакончитьТранзакцию(ВТранзакции);
								Если ВТранзакции Тогда
									Возврат Не БылиИсключения;
								КонецЕсли;
							КонецПопытки;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			
			
		ИначеЕсли Метаданные.Справочники.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Если Параметры.Объект = Неопределено Тогда
				Параметры.Объект = ОбрабатываемаяСсылка.ПолучитьОбъект();
			КонецЕсли;
			
			Если СтрокаТаблицы.Метаданные.Владельцы.Содержит(Ссылка.Метаданные()) И Параметры.Объект.Владелец = Ссылка Тогда
				Параметры.Объект.Владелец = ПравильныйЭлемент;
				ПояснитьДействие(Пояснять, "В "+Параметры.Объект+" ссылка на "+Ссылка+" ("+ТипЗнч(Ссылка)+") заменена на "+ПравильныйЭлемент+" ("+ТипЗнч(ПравильныйЭлемент)+") в реквизите ""Владелец""");
			КонецЕсли;
			
			Если СтрокаТаблицы.Метаданные.Иерархический И Параметры.Объект.Родитель = Ссылка Тогда
				Параметры.Объект.Родитель = ПравильныйЭлемент;
				ПояснитьДействие(Пояснять, "В "+Параметры.Объект+" ссылка на "+Ссылка+" ("+ТипЗнч(Ссылка)+") заменена на "+ПравильныйЭлемент+" ("+ТипЗнч(ПравильныйЭлемент)+") в реквизите ""Родитель""");
			КонецЕсли;
			
			Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И Параметры.Объект[Реквизит.Имя] = Ссылка Тогда
					Параметры.Объект[Реквизит.Имя] = ПравильныйЭлемент;
					ПояснитьДействие(Пояснять, "В "+Параметры.Объект+" ссылка на "+Ссылка+" ("+ТипЗнч(Ссылка)+") заменена на "+ПравильныйЭлемент+" ("+ТипЗнч(ПравильныйЭлемент)+") в реквизите шапки """+Реквизит.Синоним+"""");
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
							ПояснитьДействие(Пояснять, "В "+Параметры.Объект+" ссылка на "+Ссылка+" ("+ТипЗнч(Ссылка)+") заменена на "+ПравильныйЭлемент+" ("+ТипЗнч(ПравильныйЭлемент)+") в реквизите """+Реквизит.Синоним+""" табличной части """+ТЧ.Синоним+"""");
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.ПланыСчетов.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.ПланыВидовРасчета.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.Задачи.Содержит(СтрокаТаблицы.Метаданные)
				  ИЛИ Метаданные.БизнесПроцессы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Если Параметры.Объект = Неопределено Тогда
				Параметры.Объект = ОбрабатываемаяСсылка.ПолучитьОбъект();
			КонецЕсли;
						
			Для Каждого Реквизит Из СтрокаТаблицы.Метаданные.Реквизиты Цикл
				Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) И Параметры.Объект[Реквизит.Имя] = Ссылка Тогда
					Параметры.Объект[Реквизит.Имя] = ПравильныйЭлемент;
					ПояснитьДействие(Пояснять, "В "+Параметры.Объект+" ссылка на "+Ссылка+" ("+ТипЗнч(Ссылка)+") заменена на "+ПравильныйЭлемент+" ("+ТипЗнч(ПравильныйЭлемент)+") в реквизите шапки """+Реквизит.Синоним+"""");
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТЧ ИЗ СтрокаТаблицы.Метаданные.ТабличныеЧасти Цикл
				Для Каждого Реквизит Из ТЧ.Реквизиты Цикл
					Если Реквизит.Тип.СодержитТип(ТипЗнч(Ссылка)) Тогда
						СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
						Пока СтрокаТабЧасти <> Неопределено Цикл
							СтрокаТабЧасти[Реквизит.Имя] = ПравильныйЭлемент;
							СтрокаТабЧасти = Параметры.Объект[ТЧ.Имя].Найти(Ссылка, Реквизит.Имя);
							ПояснитьДействие(Пояснять, "В "+Параметры.Объект+" ссылка на "+Ссылка+" ("+ТипЗнч(Ссылка)+") заменена на "+ПравильныйЭлемент+" ("+ТипЗнч(ПравильныйЭлемент)+") в реквизите табличной части """+ТЧ.Синоним+""" """+Реквизит.Синоним+"""");
						КонецЦикла;							
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;	
			
			// Для большей универсальности обработки анализируем планы видов расчета
			Если Метаданные.ПланыВидовРасчета.Содержит(СтрокаТаблицы.Метаданные) Тогда
				
				Если СтрокаТаблицы.Метаданные.ЗависимостьОтВидовРасчета <> Метаданные.СвойстваОбъектов.ИспользованиеБазыПланаВидовРасчета.НеИспользовать Тогда
					
					// Базовые
					Для каждого СтрокаТЧ Из Параметры.Объект.БазовыеВидыРасчета Цикл
						Если СтрокаТЧ.ВидРасчета = Ссылка Тогда
							СтрокаТЧ.ВидРасчета = ПравильныйЭлемент; 
							ПояснитьДействие(Пояснять, "В "+Параметры.Объект+" ссылка на "+Ссылка+" ("+ТипЗнч(Ссылка)+") заменена на "+ПравильныйЭлемент+" ("+ТипЗнч(ПравильныйЭлемент)+") в базовых начислениях");
						КонецЕсли; 
					КонецЦикла; 
					
					// Ведущие
					Для каждого СтрокаТЧ Из Параметры.Объект.ВедущиеВидыРасчета Цикл
						Если СтрокаТЧ.ВидРасчета = Ссылка Тогда
							СтрокаТЧ.ВидРасчета = ПравильныйЭлемент;
							ПояснитьДействие(Пояснять, "В "+Параметры.Объект+" ссылка на "+Ссылка+" ("+ТипЗнч(Ссылка)+") заменена на "+ПравильныйЭлемент+" ("+ТипЗнч(ПравильныйЭлемент)+") в ведущих начислениях");
						КонецЕсли; 
					КонецЦикла; 
					
				КонецЕсли;
				
				Если СтрокаТаблицы.Метаданные.ИспользованиеПериодаДействия Тогда
					
					// Вытесняющие
					Для каждого СтрокаТЧ Из Параметры.Объект.ВытесняющиеВидыРасчета Цикл
						Если СтрокаТЧ.ВидРасчета = Ссылка Тогда
							СтрокаТЧ.ВидРасчета = ПравильныйЭлемент;
							ПояснитьДействие(Пояснять, "В "+Параметры.Объект+" ссылка на "+Ссылка+" ("+ТипЗнч(Ссылка)+") заменена на "+ПравильныйЭлемент+" ("+ТипЗнч(ПравильныйЭлемент)+") в вытеснящюих начислениях");
						КонецЕсли; 
					КонецЦикла;
				КонецЕсли; 
			КонецЕсли;
			
			
		ИначеЕсли Метаданные.Константы.Содержит(СтрокаТаблицы.Метаданные) Тогда
			
			Константы[СтрокаТаблицы.Метаданные.Имя].Установить(ПравильныйЭлемент);
			ПояснитьДействие(Пояснять, "Ссылка на "+Ссылка+" ("+ТипЗнч(Ссылка)+") заменена на "+ПравильныйЭлемент+" ("+ТипЗнч(ПравильныйЭлемент)+") в константе """+СтрокаТаблицы.Метаданные.Синоним+"""");

			
		ИначеЕсли Метаданные.РегистрыСведений.Содержит(СтрокаТаблицы.Метаданные) Тогда	
			
			СтруктураИзмерений = Новый Структура;
			НаборЗаписей = РегистрыСведений[СтрокаТаблицы.Метаданные.Имя].СоздатьНаборЗаписей();
			Если ТипЗнч(ОбрабатываемаяСсылка) = Тип("Строка") Тогда
				Для каждого ЭлементКлюча Из СтрокаТаблицы.КлючЗаписиРегистраСведений Цикл
					Если ЭлементКлюча.Представление = "Период" Тогда
						Если СтрокаТаблицы.Метаданные.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
							НаборЗаписей.Отбор["Период"].Установить(ЭлементКлюча.Значение);
						КонецЕсли;
					ИначеЕсли ЭлементКлюча.Представление = "Регистратор" Тогда
					Иначе
						НаборЗаписей.Отбор[ЭлементКлюча.Представление].Установить(ЭлементКлюча.Значение);
						СтруктураИзмерений.Вставить(ЭлементКлюча.Представление);
					КонецЕсли;
				КонецЦикла;
			Иначе
				Для Каждого Измерение ИЗ СтрокаТаблицы.Метаданные.Измерения Цикл
					НаборЗаписей.Отбор[Измерение.Имя].Установить(ОбрабатываемаяСсылка[Измерение.Имя]);
					СтруктураИзмерений.Вставить(Измерение.Имя);
				КонецЦикла;
				Если СтрокаТаблицы.Метаданные.ПериодичностьРегистраСведений <> Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический Тогда
					НаборЗаписей.Отбор["Период"].Установить(ОбрабатываемаяСсылка.Период);
				КонецЕсли;
			КонецЕсли;
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТаблицаНабора = НаборЗаписей.Выгрузить();
			НаборЗаписей.Очистить();
			
			Если БезКонтроля Тогда
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
			КонецЕсли;
			
			
			Если Не ВТранзакции Тогда
				НачатьТранзакцию();
			КонецЕсли;
			
			Попытка
				
				НаборЗаписей.Записать();
				
				Для Каждого Колонка ИЗ ТаблицаНабора.Колонки Цикл
					Если ТаблицаНабора[0][Колонка.Имя] = Ссылка Тогда
						ТаблицаНабора[0][Колонка.Имя] = ПравильныйЭлемент;
						Если СтруктураИзмерений.Свойство(Колонка.Имя) Тогда
							НаборЗаписей.Отбор[Колонка.Имя].Установить(ПравильныйЭлемент);
						КонецЕсли;
						ПояснитьДействие(Пояснять,"В "+СокрЛП(ОбрабатываемаяСсылка)+" ссылка на "+Ссылка+" ("+ТипЗнч(Ссылка)+") заменена на "+ПравильныйЭлемент+" ("+ТипЗнч(ПравильныйЭлемент)+") в """+Колонка.Заголовок+"""");
					КонецЕсли;
				КонецЦикла;
				
				НаборЗаписей.Загрузить(ТаблицаНабора);
				
				НаборЗаписей.Записать();
				ПояснитьДействие(Пояснять, "Запись "+ОбрабатываемаяСсылка+" ("+ТипЗнч(ОбрабатываемаяСсылка)+") обработана");
				
				Если Не ВТранзакции Тогда
					ЗафиксироватьТранзакцию();
				КонецЕсли; 
				
			Исключение
				
				СообщитьОбОшибкеПриЗаписи(ИнформацияОбОшибке(), БылиИсключения);
				ЗакончитьТранзакцию(ВТранзакции);
				Если ВТранзакции Тогда
					Возврат Не БылиИсключения;
				Иначе
					ОтменитьТранзакцию();
				КонецЕсли;
				
			КонецПопытки;
			
		Иначе
			ПояснитьДействие(Истина, "Ссылки типа "+СтрокаТаблицы.Метаданные+" не заменяются!!");
		КонецЕсли;
	КонецЦикла;
	
	Если Параметры.Объект <> Неопределено Тогда
		Если БезКонтроля Тогда
			Параметры.Объект.ОбменДанными.Загрузка = Истина;
		КонецЕсли;
		Попытка
			Параметры.Объект.Записать();
			ПояснитьДействие(Пояснять, "Объект "+ОбрабатываемаяСсылка+" ("+ТипЗнч(ОбрабатываемаяСсылка)+") обрабатан");
		Исключение
			СообщитьОбОшибкеПриЗаписи(ИнформацияОбОшибке(), БылиИсключения);
		КонецПопытки;
	КонецЕсли;
	
	ЗакончитьТранзакцию(ВТранзакции, БылиИсключения);
	
	Возврат Не БылиИсключения;
	
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ЗакончитьТранзакцию(ВТранзакции, БылиИсключения = Истина)
	
	Если ВТранзакции Тогда
		Если БылиИсключения Тогда
			ОтменитьТранзакцию();
		Иначе
			ЗафиксироватьТранзакцию();
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

Процедура СообщитьОбОшибкеПриЗаписи(Информация, Отказ)
	
	Причина = ?(Информация.Причина = Неопределено, Информация, Информация.Причина);	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'ОШИБКА: " + Причина.Описание +  "'"),,,,Отказ);
	
КонецПроцедуры

Процедура ПояснитьДействие(Пояснить, Сообщение)
	
	Если Пояснить Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = '" + Сообщение + "'"));
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#КонецЕсли
