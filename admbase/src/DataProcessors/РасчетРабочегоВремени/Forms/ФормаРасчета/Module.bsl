#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();

	ОбновитьДанныеФормыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновлениеРегистраЗаданий" Тогда
	
		 ОбновитьДанныеФормыНаСервере();
	
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
		
	СтандартнаяОбработка = Ложь;
	
	ОбработчикЗакрытия = Новый ОписаниеОповещения("ПредставлениеПериодаРегистрацииНачалоВыбораЗавершение", ЭтотОбъект);
	ПараметрыФормы 	   = Новый Структура("Значение, РежимВыбораПериода", ПериодРегистрации, "МЕСЯЦ");
	
	ОткрытьФорму("ОбщаяФорма.ВыборПериода",
		ПараметрыФормы, 
		ЭтотОбъект, 
		УникальныйИдентификатор,
		,
		, 
		ОбработчикЗакрытия,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);

КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	РегулированиеПредставленияПериодаРегистрации(
		Направление,
		СтандартнаяОбработка,
		ПериодРегистрации,
		ПредставлениеПериодаРегистрации);
	
	ОбновитьДанныеФормыНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетУчетРабочегоВремениНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НачалоПериода",НачалоМесяца(ПериодРегистрации));
	ПараметрыФормы.Вставить("ОкончаниеПериода",КонецМесяца(ПериодРегистрации));
	
	ОткрытьФорму("Отчет.УчетРабочегоВремениСотрудников.ФормаОбъекта",ПараметрыФормы,ЭтотОбъект);
	
КонецПроцедуры


#КонецОбласти 

#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоЭтапов

&НаКлиенте
Процедура ДеревоЭтаповВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ДеревоЭтаповПерейти" Тогда
		
		СтруктураСтроки = ИнициализироватьСтруктуруСтроки();
		ЗаполнитьЗначенияСвойств(СтруктураСтроки,ДеревоЭтапов.НайтиПоИдентификатору(ВыбраннаяСтрока));
		
		СтруктураДействия = СтруктураДействияПоляПерейтиНаСервере(СтруктураСтроки,ПериодРегистрации,ВыбраннаяСтрока);
		
		Если СтруктураДействия.Действие = "ОткрытьФорму" Тогда
			ОткрытьФорму(СтруктураДействия.ИмяФормы,СтруктураДействия.Параметры,ВладелецФормы,Истина);
		КонецЕсли;	
		
		Если СтруктураДействия.Действие = "РасчетРабочегоВремени" Тогда
			
			Если МожноПроводитьРасчет() Тогда
				
				ПараметрыПроцедуры = Новый Структура;
				ПараметрыПроцедуры.Вставить("Дата",				ПериодРегистрации);
				ПараметрыПроцедуры.Вставить("ДокументРасчета",	СтруктураСтроки.Документ);
				ПараметрыПроцедуры.Вставить("ВыбраннаяСтрока",	ВыбраннаяСтрока);
				
				ВыполнениеРасчета(ПараметрыПроцедуры);
				
			Иначе
				СообщениеПользователю = Новый СообщениеПользователю;
				СообщениеПользователю.Текст = "Не все этапы закрыты";
				СообщениеПользователю.Сообщить();
			КонецЕсли;
						
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоЭтаповВыполненПриИзменении(Элемент)
	ЗаписатьДанныеРегистраНаСервере(Элементы.ДеревоЭтапов.ТекущаяСтрока);	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоЭтаповНеВыполнятьПриИзменении(Элемент)
	
	ЗаписатьДанныеРегистраНаСервере(Элементы.ДеревоЭтапов.ТекущаяСтрока);	
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	//++НеВыполнять
	//Устанавливаем текст поля "Перейти" по флагу "НеВыполнять"
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЭтаповПерейти.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЭтапов.НеВыполнять");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Отменен'"));
	
	//Закрываем поле "Выполнен" там где флаг установлен "НеВыполнять"
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЭтаповВыполнен.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЭтапов.НеВыполнять");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	//--НеВыполнять
	                     
	//++Отчеты
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ЗаданияРасчета.КонтрольСпискаСотрудников);                
	СписокЗначений.Добавить(Перечисления.ЗаданияРасчета.ПроверкаГрафиковРаботы);
	СписокЗначений.Добавить(Перечисления.ЗаданияРасчета.ПроверкаИндивидуальныхГрафиковРаботы);
	СписокЗначений.Добавить(Перечисления.ЗаданияРасчета.ПроверкаСостоянияСотрудников);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЭтаповПерейти.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЭтапов.ЗаданиеРасчета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Открыть форму списка'"));
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЭтаповНеВыполнять.Имя);

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЭтапов.ЗаданиеРасчета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ЗаданияРасчета.ЗагрузкаДанныхПроходовМосква;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	//++Отчеты

	//++Открыть форму списка / Выполнить
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ЗаданияРасчета.ЗагрузкаДанныхПроходовМосква);                
	СписокЗначений.Добавить(Перечисления.ЗаданияРасчета.ЗагрузкаДанныхПроходовРогачево);
	СписокЗначений.Добавить(Перечисления.ЗаданияРасчета.ЗагрузкаДокументовDMC);
	СписокЗначений.Добавить(Перечисления.ЗаданияРасчета.ЗагрузкаДокументовERP);
	СписокЗначений.Добавить(Перечисления.ЗаданияРасчета.РасчетРабочегоВремени);
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЭтаповПерейти.Имя);

	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЭтапов.Выполнен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЭтапов.НеВыполнять");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЭтапов.ЗаданиеРасчета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;


	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Открыть форму списка'"));

	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЭтаповПерейти.Имя);

	//ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЭтапов.Выполнен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЭтапов.НеВыполнять");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЭтапов.ЗаданиеРасчета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Выполнить'"));
	//--Открыть форму списка
	
	
	//++Объяснительные
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЭтаповПерейти.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЭтапов.ЗаданиеРасчета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ЗаданияРасчета.ОформлениеОбъяснений;

	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", НСтр("ru = 'Открыть форму списка'"));
	//--Объяснительные
	
	//++Расчет закрываем поле "Выполнен" по расчету
	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЭтаповВыполнен.Имя);
	
	ГруппаОтбораРасчет = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));

	ОтборЭлемента = ГруппаОтбораРасчет.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЭтапов.РасчетМесяцаВыполнен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = ГруппаОтбораРасчет.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЭтапов.ЗаданиеРасчета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = Перечисления.ЗаданияРасчета.РасчетРабочегоВремени;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	//--Расчет
	
	
	//++Закрываем поле "Выполнен" у не выволненных заданий по списку
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.Добавить(Перечисления.ЗаданияРасчета.ЗагрузкаДанныхПроходовМосква);                
	СписокЗначений.Добавить(Перечисления.ЗаданияРасчета.ЗагрузкаДанныхПроходовРогачево);
	СписокЗначений.Добавить(Перечисления.ЗаданияРасчета.ЗагрузкаДокументовDMC);
	СписокЗначений.Добавить(Перечисления.ЗаданияРасчета.ЗагрузкаДокументовERP);
	СписокЗначений.Добавить(Перечисления.ЗаданияРасчета.РасчетРабочегоВремени);

	Элемент = УсловноеОформление.Элементы.Добавить();
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.ДеревоЭтаповВыполнен.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЭтапов.ЗаданиеРасчета");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборЭлемента.ПравоеЗначение = СписокЗначений;

	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДеревоЭтапов.Выполнен");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;

	Элемент.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр", Истина);
	//--Объяснительные


КонецПроцедуры // УстановитьУсловноеОформление()

&НаСервере
Процедура ОбновитьДанныеФормыНаСервере()
	
	ЭлементыДерева = ДеревоЭтапов.ПолучитьЭлементы();
	ЭлементыДерева.Очистить();

	Если ПериодРегистрации = '00010101' Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Месяц",ПериодРегистрации);
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаданияНаРасчетРабочегоВремени.Месяц КАК Месяц,
	|	ЗаданияНаРасчетРабочегоВремени.ЗаданиеРасчета КАК ЗаданиеРасчета,
	|	ЗаданияНаРасчетРабочегоВремени.Выполнен КАК Выполнен,
	|	ЗаданияНаРасчетРабочегоВремени.НомерЗадания КАК НомерЗадания,
	|	ЗаданияНаРасчетРабочегоВремени.Документ КАК Документ,
	|	ЗаданияНаРасчетРабочегоВремени.НеВыполнять КАК НеВыполнять,
	|	ЗаданияНаРасчетРабочегоВремени.РасчетМесяцаВыполнен КАК РасчетМесяцаВыполнен
	|ПОМЕСТИТЬ ДанныеРегистра
	|ИЗ
	|	РегистрСведений.ЗаданияНаРасчетРабочегоВремени КАК ЗаданияНаРасчетРабочегоВремени
	|ГДЕ
	|	ЗаданияНаРасчетРабочегоВремени.Месяц = &Месяц
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗаданияРасчета.Ссылка КАК ЗаданиеРасчета,
	|	ЗаданияРасчета.Порядок КАК НомерЗадания,
	|	ЕСТЬNULL(ДанныеРегистра.Выполнен, ЛОЖЬ) КАК Выполнен,
	|	ДанныеРегистра.Документ КАК Документ,
	|	ДанныеРегистра.НеВыполнять КАК НеВыполнять,
	|	ДанныеРегистра.РасчетМесяцаВыполнен КАК РасчетМесяцаВыполнен
	|ИЗ
	|	Перечисление.ЗаданияРасчета КАК ЗаданияРасчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ДанныеРегистра КАК ДанныеРегистра
	|		ПО ЗаданияРасчета.Ссылка = ДанныеРегистра.ЗаданиеРасчета
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЗадания";
	
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		 ЗаполнитьЗначенияСвойств(ЭлементыДерева.Добавить(),Выборка)
	КонецЦикла;
	
КонецПроцедуры // ОбновитьДанныеФормыНаСервере()

&НаКлиенте
Процедура ПредставлениеПериодаРегистрацииНачалоВыбораЗавершение(ВыбранныйПериод, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныйПериод <> Неопределено И ПериодРегистрации <> ВыбранныйПериод Тогда
		
		ПериодРегистрации = ВыбранныйПериод;
		ПредставлениеПериодаРегистрации = КонсолидацияФункцииКлиент.ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);
		
		ОбновитьДанныеФормыНаСервере();
		
	КонецЕсли;
	
КонецПроцедуры

#Область РаботаСПериодомРегистрации

//// Возвращает строковое представление периода.
////
//// Параметры:
////  ПериодРегистрации - Дата   - Дата внутри месяца или квартала, представление которых нужно получить
////  КалендарныйПериод - Строка - "Месяц" или "Квартал".
////
//// Возвращаемое значение:
////  Строка - Представление месяца или квартала, внутри которых находится значение ПериодРегистрации.
////
//&НаКлиенте
//Функция ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации, КалендарныйПериод = "Месяц") 
//
//	Если КалендарныйПериод = "Месяц" Тогда
//		Возврат Формат(ПериодРегистрации, "ДФ='MMMM yyyy'")
//	ИначеЕсли КалендарныйПериод = "Квартал" Тогда
//		Возврат ПредставлениеПериода(НачалоКвартала(ПериодРегистрации), КонецКвартала(ПериодРегистрации));
//	КонецЕсли;
//
//КонецФункции

// Увеличивает или уменьшает значение периода на одно значение.
//
// Параметры:
//  Направление                     - Число  - "1", если шагаем на следующий месяц, "-1", если шагаем в предыдущий месяц
//  СтандартнаяОбработка            - Булево - Признак стандартной обработки события
//  ПериодРегистрации               - Дата   - Переменная, в которую помещается значение следующего или предыдущего месяца
//  ПредставлениеПериодаРегистрации - Строка - Представление месяца ПериодаРегистрации.
//
&НаКлиенте
Процедура РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка, ПериодРегистрации, ПредставлениеПериодаРегистрации) 

	СтандартнаяОбработка = Ложь;

	Если Направление = 1 Тогда
		ПериодРегистрации = КонецМесяца(ПериодРегистрации) + 1;
	ИначеЕсли Направление = -1 Тогда
		ПериодРегистрации = НачалоМесяца(ПериодРегистрации - 1);
	КонецЕсли;

	ПредставлениеПериодаРегистрации = КонсолидацияФункцииКлиент.ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);

КонецПроцедуры

// Выбирает период из списка возможных периодов.
//
// Параметры:
//  Элемент              - ПолеФормы - Поле формы, в котором наступает событие "НачалоВыбора".
//  СтандартнаяОбработка - Булево     - Признак стандартной обработки события
//  ПериодРегистрации    - Дата       - Переменная, в которую помещается выбранное значение
//  Форма             	 - ФормаКлиентскогоПриложения - Управляемая форма, в которой происходит событие "Начало выбора"
//  ОповещениеОВыборе    - ОписаниеОповещения - Описание оповещения о выборе периода
//  НачальноеЗначение    - Дата       - Начальная дата для выбора периода
//  КалендарныйПериод    - Строка     - "Месяц" или "Квартал" - шаг периода.
//
&НаКлиенте
Процедура НачалоВыбораПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, Форма, ОповещениеОВыборе, НачальноеЗначение = Неопределено, КалендарныйПериод = "Месяц") 

	СтандартнаяОбработка = Ложь;

	Если НачальноеЗначение = Неопределено Тогда
		НачальноеЗначение = ПериодРегистрации;
	КонецЕсли;

	СписокВыбора = Новый СписокЗначений;
	НачалоТекущегоГода = НачалоГода(НачальноеЗначение);
	НачалоПрошлогоГода = НачалоГода(НачалоТекущегоГода - 1);
	СписокВыбора.Добавить(НачалоПрошлогоГода, (Формат(НачалоПрошлогоГода, "ДФ='yyyy'") + "..."));
	НачалоПериодаЗаполнения = НачалоТекущегоГода;
	ЭлементПоУмолчанию = Неопределено;
	
	Если КалендарныйПериод = "Месяц" Тогда
		КоличествоПериодовВГоду = 12;
		КоличествоМесяцевВПериоде = 1;
	ИначеЕсли КалендарныйПериод = "Квартал" Тогда
		КоличествоПериодовВГоду = 4;
		КоличествоМесяцевВПериоде = 3;
	КонецЕсли;
	
	Для Счетчик = 1 По КоличествоПериодовВГоду Цикл
		ДобавленныйЭлемент = СписокВыбора.Добавить(НачалоПериодаЗаполнения, 
						КонсолидацияФункцииКлиент.ПолучитьПредставлениеПериодаРегистрации(НачалоПериодаЗаполнения, КалендарныйПериод));
		Если НачальноеЗначение = НачалоПериодаЗаполнения Тогда
			ЭлементПоУмолчанию = ДобавленныйЭлемент;
		КонецЕсли;
		НачалоПериодаЗаполнения = ДобавитьМесяц(НачалоПериодаЗаполнения, КоличествоМесяцевВПериоде);
	КонецЦикла;
	
	НачалоСледующегоГода = КонецГода(НачалоТекущегоГода) + 1;
	СписокВыбора.Добавить(НачалоСледующегоГода, (Формат(НачалоСледующегоГода, "ДФ='yyyy'") + "..."));
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Элемент",              Элемент);
	ДополнительныеПараметры.Вставить("СтандартнаяОбработка", СтандартнаяОбработка);
	ДополнительныеПараметры.Вставить("ПериодРегистрации",    ПериодРегистрации);
	ДополнительныеПараметры.Вставить("Форма",                Форма);
	ДополнительныеПараметры.Вставить("ОповещениеОВыборе",    ОповещениеОВыборе);
	ДополнительныеПараметры.Вставить("НачальноеЗначение",    НачальноеЗначение);
	ДополнительныеПараметры.Вставить("КалендарныйПериод",    КалендарныйПериод);
	
	Оповещение = Новый ОписаниеОповещения("НачалоВыбораПредставленияПериодаРегистрацииЗавершение", ЭтотОбъект, ДополнительныеПараметры);
	Форма.ПоказатьВыборИзСписка(Оповещение, СписокВыбора, Элемент, ЭлементПоУмолчанию);
	
КонецПроцедуры

// Служебная процедура.
// 
// Параметры:
//  ВыбранныйЭлемент 		- ЭлементСпискаЗначений
//  ДополнительныеПараметры - Структура
&НаКлиенте
Процедура НачалоВыбораПредставленияПериодаРегистрацииЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры)  Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОВыборе, Неопределено);
		Возврат;
	ИначеЕсли Год(ВыбранныйЭлемент.Значение) <> Год(ДополнительныеПараметры.НачальноеЗначение) Тогда
		НачалоВыбораПредставленияПериодаРегистрации(
			ДополнительныеПараметры.Элемент, 
			ДополнительныеПараметры.СтандартнаяОбработка, 
			ДополнительныеПараметры.ПериодРегистрации,
			ДополнительныеПараметры.Форма,
			ДополнительныеПараметры.ОповещениеОВыборе,
			ВыбранныйЭлемент.Значение, 
			ДополнительныеПараметры.КалендарныйПериод);
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(ДополнительныеПараметры.ОповещениеОВыборе, ВыбранныйЭлемент.Значение);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Функция ИнициализироватьСтруктуруСтроки()
	
	СтруктураСтроки = Новый Структура;
	
	СтруктураСтроки.Вставить("ЗаданиеРасчета");
	СтруктураСтроки.Вставить("Выполнен");
	СтруктураСтроки.Вставить("НомерЗадания");
	СтруктураСтроки.Вставить("Документ");
	СтруктураСтроки.Вставить("НеВыполнять");
	СтруктураСтроки.Вставить("РасчетМесяцаВыполнен");
	
	Возврат СтруктураСтроки;
	
КонецФункции // ИнициализироватьСтруктуруСтроки()

&НаСервереБезКонтекста
Функция СтруктураДействияПоляПерейтиНаСервере(СтруктураСтроки,Месяц,ВыбраннаяСтрока)
	
	СтруктураДействия = Новый Структура;
	
	СтруктураДействия.Вставить("Действие","ОткрытьФорму");
	СтруктураДействия.Вставить("ИмяФормы","");
	СтруктураДействия.Вставить("Параметры",Новый Структура());
	
	СтруктураДействия.Параметры.Вставить("ВыбраннаяСтрока",	ВыбраннаяСтрока);
	СтруктураДействия.Параметры.Вставить("НачалоПериода",	НачалоМесяца(Месяц));
	СтруктураДействия.Параметры.Вставить("КонецПериода",	КонецМесяца(Месяц));

	//Проходы Москва
	Если СтруктураСтроки.ЗаданиеРасчета = Перечисления.ЗаданияРасчета.ЗагрузкаДанныхПроходовМосква Тогда 
		
		Если  СтруктураСтроки.НеВыполнять Тогда
			Возврат СтруктураДействия;
		КонецЕсли;
		
		СтруктураДействия.Параметры.Вставить("Территория",		Перечисления.Территории.Москва);
		СтруктураДействия.Параметры.Вставить("Ключ",			СтруктураСтроки.Документ);
		
		Если  СтруктураСтроки.Выполнен Тогда
			СтруктураДействия.Вставить("ИмяФормы","Документ.ПроходыPerco.ФормаСписка");
		Иначе 	
			СтруктураДействия.Вставить("ИмяФормы","Документ.ПроходыPerco.ФормаОбъекта");
		КонецЕсли;
		

	КонецЕсли;
	
	//Проходы Рогачево
	Если СтруктураСтроки.ЗаданиеРасчета = Перечисления.ЗаданияРасчета.ЗагрузкаДанныхПроходовРогачево Тогда 
		
		Если  СтруктураСтроки.НеВыполнять Тогда
			Возврат СтруктураДействия;
		КонецЕсли;
		
		СтруктураДействия.Параметры.Вставить("Территория",		Перечисления.Территории.Рогачево);
		СтруктураДействия.Параметры.Вставить("Ключ",			СтруктураСтроки.Документ);

		Если  СтруктураСтроки.Выполнен Тогда
			СтруктураДействия.Вставить("ИмяФормы","Документ.ПроходыPerco.ФормаСписка");
		Иначе 	
			//создаем новый выполнение
			СтруктураДействия.Вставить("ИмяФормы","Документ.ПроходыPerco.ФормаОбъекта");
		КонецЕсли;


	КонецЕсли;

	//ЗаявкиDMC
	Если СтруктураСтроки.ЗаданиеРасчета = Перечисления.ЗаданияРасчета.ЗагрузкаДокументовDMC Тогда 
		
		Если  СтруктураСтроки.НеВыполнять Тогда
			Возврат СтруктураДействия;
		КонецЕсли;
		
		СтруктураДействия.Параметры.Вставить("Ключ",			СтруктураСтроки.Документ);

		Если  СтруктураСтроки.Выполнен Тогда
			СтруктураДействия.Вставить("ИмяФормы","Документ.ЗаявкиDMC.ФормаСписка");
		Иначе
			СтруктураДействия.Вставить("ИмяФормы","Документ.ЗаявкиDMC.ФормаОбъекта");
		КонецЕсли;
		

	КонецЕсли;

	//ОтклоненияERP
	Если СтруктураСтроки.ЗаданиеРасчета = Перечисления.ЗаданияРасчета.ЗагрузкаДокументовERP Тогда 
		
		Если  СтруктураСтроки.НеВыполнять Тогда
			Возврат СтруктураДействия;
		КонецЕсли;
		
		СтруктураДействия.Параметры.Вставить("Ключ",			СтруктураСтроки.Документ);

		Если  СтруктураСтроки.Выполнен Тогда
			СтруктураДействия.Вставить("ИмяФормы","Документ.ОтклоненияERP.ФормаСписка");
		Иначе 
			СтруктураДействия.Вставить("ИмяФормы","Документ.ОтклоненияERP.ФормаОбъекта");
		КонецЕсли;
		
		
	КонецЕсли;

	//ОбъяснительнаяЗаписка
	Если СтруктураСтроки.ЗаданиеРасчета = Перечисления.ЗаданияРасчета.ОформлениеОбъяснений Тогда 
		
		
		СтруктураДействия.Вставить("ИмяФормы","Документ.ОбъяснительнаяЗаписка.ФормаСписка");
		
		
	КонецЕсли;

	//СписокСотрудников
	Если СтруктураСтроки.ЗаданиеРасчета = Перечисления.ЗаданияРасчета.КонтрольСпискаСотрудников Тогда 
		
		СтруктураДействия.Вставить("ИмяФормы","Справочник.Сотрудники.ФормаСписка");
		
		
	КонецЕсли;
	
	//ГрафикиРаботыСотрудников
	Если СтруктураСтроки.ЗаданиеРасчета = Перечисления.ЗаданияРасчета.ПроверкаГрафиковРаботы Тогда 
		
		СтруктураДействия.Вставить("ИмяФормы","Документ.НазначениеПостоянныхГрафиков.ФормаСписка");
		
		
	КонецЕсли;

		//ГрафикиРаботыСотрудников
	Если СтруктураСтроки.ЗаданиеРасчета = Перечисления.ЗаданияРасчета.ПроверкаИндивидуальныхГрафиковРаботы Тогда 
		
		СтруктураДействия.Вставить("ИмяФормы","Документ.НазначениеИндивидуальныхГрафиков.ФормаСписка");
		
		
	КонецЕсли;

	//СостояниеСотрудников
	Если СтруктураСтроки.ЗаданиеРасчета = Перечисления.ЗаданияРасчета.ПроверкаСостоянияСотрудников Тогда 
		
		СтруктураДействия.Вставить("ИмяФормы","Документ.ОтражениеСостоянийСотрудников.ФормаСписка");
		
		
	КонецЕсли;
	
	//СостояниеСотрудников
	Если СтруктураСтроки.ЗаданиеРасчета = Перечисления.ЗаданияРасчета.РасчетРабочегоВремени Тогда 
		
		Если  СтруктураСтроки.Выполнен Тогда
			СтруктураДействия.Вставить("ИмяФормы","Документ.РасчетРабочегоВремени.ФормаСписка");
		Иначе 	
			СтруктураДействия.Вставить("Действие","РасчетРабочегоВремени");
		КонецЕсли;
		
	КонецЕсли;

	Возврат СтруктураДействия;

КонецФункции // СтруктураДействияПоляПерейтиНаСервере()

&НаКлиенте
Процедура ВыполнениеРасчета(ПараметрыПроцедуры)


	ДлительнаяОперация = НачатьВыполнениеСервернойКомандыВФоне(ПараметрыПроцедуры, УникальныйИдентификатор);
	
	ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	ПараметрыОжидания.ТекстСообщения = "Выполняется расчет";
	ПараметрыОжидания.ОповещениеПользователя.Показать = Истина;
	ПараметрыОжидания.ВыводитьОкноОжидания = Истина;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ПослеЗавершенияВыполненияСервернойКомандыВФоне", ЭтотОбъект, ПараметрыПроцедуры);
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);

КонецПроцедуры // ВыполнениеРасчета()

&НаСервереБезКонтекста
Функция НачатьВыполнениеСервернойКомандыВФоне(ПараметрыПроцедуры, УникальныйИдентификатор)
	
	ИмяПроцедуры = "КонсолидацияРасчет.РассчитатьДанныеУчетаВремениФоновымЗаданием";
	
	НастройкиЗапуска = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	НастройкиЗапуска.НаименованиеФоновогоЗадания = НСтр("ru = 'Расчет учета рабочего времени'");
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыПроцедуры, НастройкиЗапуска);
	
КонецФункции

&НаКлиенте
Процедура ПослеЗавершенияВыполненияСервернойКомандыВФоне(Задание, ДополнительныеПараметры) Экспорт
	
	Если Задание = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Задание.Статус = "Ошибка" Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось выполнить команду по причине:
				|%1.'"), Задание.КраткоеПредставлениеОшибки);
	Иначе
		
		Результат = ПолучитьИзВременногоХранилища(Задание.АдресРезультата);
		
		СтрокаДерева = ДеревоЭтапов.НайтиПоИдентификатору(Результат.ВыбраннаяСтрока);
		СтрокаДерева.Документ = Результат.ДокументРасчета;
		СтрокаДерева.Выполнен = Истина;
		
		ЗаписатьДанныеРегистраНаСервере(Результат.ВыбраннаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция МожноПроводитьРасчет()
	
	ЭлементыДерева = ДеревоЭтапов.ПолучитьЭлементы();
	ВерхняяГраница = ЭлементыДерева.Количество()-2;
	
	Для Индекс = 0 По ВерхняяГраница Цикл
	
		Если Не(ЭлементыДерева[Индекс].Выполнен Или ЭлементыДерева[Индекс].НеВыполнять) Тогда
		   Возврат Ложь;
		КонецЕсли;	
	
	КонецЦикла;
	
	Возврат Истина;

КонецФункции // МожноПроводитьРасчет()


&НаСервере
Процедура ЗаписатьДанныеРегистраНаСервере(Идентификатор)
	
	СтрокаДерева = ДеревоЭтапов.НайтиПоИдентификатору(Идентификатор);
	
	НаборЗаписей = РегистрыСведений.ЗаданияНаРасчетРабочегоВремени.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Месяц.Установить(ПериодРегистрации);
	НаборЗаписей.Отбор.ЗаданиеРасчета.Установить(СтрокаДерева.ЗаданиеРасчета);
	
	СтрокаРегистра = НаборЗаписей.Добавить();
	
	СтрокаРегистра.Месяц 			= ПериодРегистрации;
	СтрокаРегистра.ЗаданиеРасчета 	= СтрокаДерева.ЗаданиеРасчета;
	
	СтрокаРегистра.Выполнен 	= СтрокаДерева.Выполнен;
	СтрокаРегистра.НеВыполнять 	= СтрокаДерева.НеВыполнять;                     
	СтрокаРегистра.НомерЗадания = СтрокаДерева.НомерЗадания;
	СтрокаРегистра.Документ 	= СтрокаДерева.Документ;                        
	СтрокаРегистра.РасчетМесяцаВыполнен 	= СтрокаДерева.РасчетМесяцаВыполнен;                        
	
	НаборЗаписей.Записать();
	
	Если Не СтрокаДерева.Выполнен Тогда
		
		НаборЗаписей = РегистрыСведений.ЗаданияНаРасчетРабочегоВремени.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Месяц.Установить(ПериодРегистрации);
		НаборЗаписей.Отбор.ЗаданиеРасчета.Установить(Перечисления.ЗаданияРасчета.РасчетРабочегоВремени);
		НаборЗаписей.Прочитать();
		
		Если  НаборЗаписей.Количество() > 0 Тогда
			
			СтрокаРегистра = НаборЗаписей[0];
			
			СтрокаРегистра.Выполнен 				= Ложь;
			СтрокаРегистра.РасчетМесяцаВыполнен 	= Ложь;                        
			
			НаборЗаписей.Записать();
			
		КонецЕсли;
		
		ЭлементыДерева = ДеревоЭтапов.ПолучитьЭлементы();
		ЭлементыДерева[ЭлементыДерева.Количество()-1].Выполнен = Ложь;
		
	КонецЕсли;

КонецПроцедуры // ЗаписатьДанныеРегистраНаСервере()
#КонецОбласти 