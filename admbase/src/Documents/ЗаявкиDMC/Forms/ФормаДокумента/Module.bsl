////////////////////////////////////////////////////////////////////////////////
// <Заголовок модуля: краткое описание и условия применения модуля.>
//  
////////////////////////////////////////////////////////////////////////////////

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("НачалоПериода")  Тогда 
		Объект.Дата = Параметры.НачалоПериода 
	КонецЕсли;
            	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ТекущийОбъект.Дата = НачалоМесяца(ТекущийОбъект.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ОбновлениеРегистраЗаданий",,ЭтотОбъект);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	Объект.Дата = НачалоМесяца(Объект.Дата);
КонецПроцедуры

#КонецОбласти 

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
	ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

//@skip-check module-structure-form-event-regions
&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ЗагрузитьЗаявки(Команда)
	
	ЗагрузитьЗаявкиЗавершение();
	
	Объект.Комментарий = "Загружены документы заявки";
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ЗагрузитьЗаявкиЗавершение(МассивОшибок = Неопределено)
	
	Если МассивОшибок = Неопределено Тогда
		МассивОшибок = Новый Массив;
	КонецЕсли;
	//TODO - Здесь подумать как получать данные из другой базы только один раз 
	ИсходныеДанные = ПолучитьИсходныеДанные(Объект.Дата,МассивОшибок);
	
	Если МассивОшибок.Количество() = 0 Тогда

		Объект.ИсходныеДанные.Очистить();
		Для Каждого ЭлементМассива Из ИсходныеДанные Цикл
			ЗаполнитьЗначенияСвойств(Объект.ИсходныеДанные.Добавить(), ЭлементМассива);
		КонецЦикла;
	Иначе
		ОписаниеОповещения = Новый ОписаниеОповещения("ПослеЗакрытияФормыКорректировкаЗагружаемыхДанных", ЭтотОбъект, 
				Новый Структура);
				
		ПараметрыФормы = Новый Структура("МассивОшибок", МассивОшибок);
		
		ОткрытьФорму("Обработка.КорректировкаЗагружаемыхДанных.Форма", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения); 
		
	КонецЕсли;
	
КонецПроцедуры // ЗагрузитьЗаявкиЗавершение()

&НаСервереБезКонтекста
Функция ПолучитьИсходныеДанные(Дата,МассивОшибок)
	Возврат КонсолидацияЗагрузкаДанных.СформироватьИсходныеДанныеЗаявкиDMC(Дата,МассивОшибок);
КонецФункции // ПолучитьИсходныеДанные()

&НаКлиенте
Процедура ПослеЗакрытияФормыКорректировкаЗагружаемыхДанных(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ЗагрузитьЗаявкиЗавершение(Результат);
	
КонецПроцедуры // ПослеЗакрытияФормыКорректировкаЗагружаемыхДанных()

#КонецОбласти



