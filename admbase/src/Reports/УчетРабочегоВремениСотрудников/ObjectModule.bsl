#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтруктураПериода = ПолучитьСтруктуруПериода();

	ПроверкаВозможностиФормированияОтчета(СтруктураПериода);
	
	ДеревоДетали = СформироватьДеревоДетали();
	ТаблицаСуммы = СформироватьТаблицуСумм();
	ТаблицаШапки = СформироватьТаблицуШапки();
	
	ДокументРезультат.Очистить();
	
	Макет = ПолучитьМакет("УчетРабочегоВремени");
	ПериодСтрокой = СтрШаблон("Отчетный период %1-%2",Формат(СтруктураПериода.ДатаНачала,"ДЛФ=Д"),Формат(СтруктураПериода.ДатаОкончания,"ДЛФ=Д"));
	
	ПервыйВход = Истина;
	Для каждого СтрокаДерева  Из ДеревоДетали.Строки Цикл
		
		Если Не ПервыйВход Тогда
			ДокументРезультат.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		ПервыйВход = Ложь;
		
		СтрокаТаблицы = ТаблицаСуммы.Найти(СтрокаДерева.Сотрудник,"Сотрудник");
		СтрокаШапки = ТаблицаШапки.Найти(СтрокаДерева.Сотрудник,"Сотрудник");
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("СотрудникНаименование",		СтрокаШапки.СотрудникНаименование);
		СтруктураПараметров.Вставить("ПодразделениеНаименование",	СтрокаШапки.ПодразделениеНаименование);
		СтруктураПараметров.Вставить("ДолжностьНаименование",		СтрокаШапки.ДолжностьНаименование);
		СтруктураПараметров.Вставить("ГрафикНаименование",		
											СтрШаблон("%1 (%2-%3)",СтрокаШапки.ГрафикНаименование,
											Формат(СтрокаШапки.РабочееВремяНачало,"ДФ=ЧЧ-мм"),
											Формат(СтрокаШапки.РабочееВремяОкончание,"ДФ=ЧЧ-мм")));
		СтруктураПараметров.Вставить("ПериодСтрокой",			ПериодСтрокой);
		СтруктураПараметров.Вставить("ОбщаяНормаДатой",			СекундыВЧасыИМинутыСтрокой(СтрокаШапки.НормаЧислом));
		
		СтруктураПараметров.Вставить("Сотрудник",		СтрокаШапки.Сотрудник);
		СтруктураПараметров.Вставить("Подразделение",	СтрокаШапки.Подразделение);
		СтруктураПараметров.Вставить("Должность",		СтрокаШапки.Должность);
		СтруктураПараметров.Вставить("ГрафикРаботы",	СтрокаШапки.ГрафикРаботы);

		ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
		ДокументРезультат.Вывести(ОбластьМакета);
		
		//ЦветКрасный = Новый Цвет(255,0,0);
		ЦветКрасный = ЦветаСтиля.ЦветОтрицательногоЧисла;
		
		НомерСтроки = 1;
		Для каждого СтрокаДетали Из СтрокаДерева.Строки Цикл
			
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаДетади");
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("НомерСтроки",							НомерСтроки);
			СтруктураПараметров.Вставить("ДатаДеньНедели",						СтрШаблон("%1,%2",Формат(СтрокаДетали.Дата,"ДЛФ=Д"),Формат(СтрокаДетали.Дата,"ДФ=дддд")));
			СтруктураПараметров.Вставить("НормаДатой",							СтрокаДетали.НормаДатой);
			СтруктураПараметров.Вставить("ВходДатой",							СтрокаДетали.ВходДатой);  						//4
			СтруктураПараметров.Вставить("ВыходДатой",							СтрокаДетали.ВыходДатой); 						//5
			СтруктураПараметров.Вставить("ПрисутствиеДатой",					СтрокаДетали.ПрисутствиеДатой); 				//6
			СтруктураПараметров.Вставить("ОтработаноРабочееВремяДатой",			СтрокаДетали.ОтработаноРабочееВремяДатой);  	//7
			СтруктураПараметров.Вставить("ОтработаноСверхРабочееВремяДатой",	СтрокаДетали.ОтработаноСверхРабочееВремяДатой); //8
			СтруктураПараметров.Вставить("РабочееВремяЗаТерриториейДатой",		СтрокаДетали.РабочееВремяЗаТерриториейДатой);
			СтруктураПараметров.Вставить("ОтсутствиеДатой",						СтрокаДетали.ОтсутствиеДатой);
			
			СтруктураПараметров.Вставить("ОтпускБольничныйУвольнениеДатой",		СтрокаДетали.ОтпускБольничныйУвольнениеДатой);
			СтруктураПараметров.Вставить("НомерДокумента",						СтрокаДетали.НомерДокумента);
			СтруктураПараметров.Вставить("ПричинаОтсутствия",					СтрокаДетали.ПричинаОтсутствия);
			СтруктураПараметров.Вставить("СодержаниеЗаявки",					СтрокаДетали.СодержаниеЗаявки);
			Если Не ПустаяСтрока(СтрокаДетали.НомерОбъяснения) Тогда
				СтруктураПараметров.Вставить("ОбъяснительнаяЗаписка",				СтрШаблон("№ %1 %2",СтрокаДетали.НомерОбъяснения,СтрокаДетали.СодержаниеОбъяснения));
			КонецЕсли; 
			
			ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
			
			
			//++Раскраска
			Если СтрокаДетали.ВходДатой <> '00010101' Тогда
				//@skip-check new-font
				ОбластьМакета.Область("R1C6").Шрифт = Новый Шрифт(ОбластьМакета.Область("R1C6").Шрифт,,,Истина);
			КонецЕсли; 
			Если СтрокаДетали.ВыходДатой <> '00010101' Тогда
				//@skip-check new-font
				ОбластьМакета.Область("R1C7").Шрифт = Новый Шрифт(ОбластьМакета.Область("R1C7").Шрифт,,,Истина);
			КонецЕсли; 
			Если СтрокаДетали.ПрисутствиеДатой <> '00010101' Тогда
				//@skip-check new-font
				ОбластьМакета.Область("R1C8").Шрифт = Новый Шрифт(ОбластьМакета.Область("R1C8").Шрифт,,,Истина);
			КонецЕсли; 
			Если СтрокаДетали.ОтработаноРабочееВремяДатой <> '00010101' Тогда
				//@skip-check new-font
				ОбластьМакета.Область("R1C9").Шрифт = Новый Шрифт(ОбластьМакета.Область("R1C9").Шрифт,,,Истина);
			КонецЕсли; 
			Если СтрокаДетали.ОтработаноСверхРабочееВремяДатой <> '00010101' Тогда
				//@skip-check new-font
				ОбластьМакета.Область("R1C10").Шрифт = Новый Шрифт(ОбластьМакета.Область("R1C10").Шрифт,,,Истина);
			КонецЕсли; 
			
			Если ПустаяСтрока(СтрокаДетали.ПричинаОтсутствия) И СтрокаДетали.ОтработаноРабочееВремяДатой < СтрокаДетали.НормаДатой Тогда
				ОбластьМакета.Область("R1C6").ЦветТекста = ЦветКрасный;
				ОбластьМакета.Область("R1C7").ЦветТекста = ЦветКрасный;
				ОбластьМакета.Область("R1C8").ЦветТекста = ЦветКрасный;
				ОбластьМакета.Область("R1C9").ЦветТекста = ЦветКрасный;
			КонецЕсли; 
			
			
			ДокументРезультат.Вывести(ОбластьМакета);
			
			НомерСтроки = НомерСтроки+1;
			
			//Вход на территорию 	- 4
			//Выход с территории 	- 5	
			//Время присутствия		- 6
			//Отработано в рабочее время -7
			//Отработано за пределами рабочего времени -8
			
		КонецЦикла;
		
		
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСумма");
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("СотрудникНаименование",			СтрокаТаблицы.СотрудникНаименование);
		СтруктураПараметров.Вставить("ОбщаяНормаДатой",					СекундыВЧасыИМинутыСтрокой(СтрокаТаблицы.НормаЧислом));
		СтруктураПараметров.Вставить("ОбщаяНормаСУчетомПричиныДатой",	СекундыВЧасыИМинутыСтрокой(СтрокаТаблицы.НормаСУчетомПричиныЧислом));
		СтруктураПараметров.Вставить("ОтработаноРабочееВремяДатой",		СекундыВЧасыИМинутыСтрокой(СтрокаТаблицы.ОтработаноРабочееВремяЧислом));
		
		СтруктураПараметров.Вставить("ОтработаноСверхРабочееВремяДатой",	СекундыВЧасыИМинутыСтрокой(СтрокаТаблицы.ОтработаноСверхРабочееВремяЧислом));
		СтруктураПараметров.Вставить("РабочееВремяЗаТерриториейДатой",		СекундыВЧасыИМинутыСтрокой(СтрокаТаблицы.РабочееВремяЗаТерриториейЧислом));
		СтруктураПараметров.Вставить("ОтсутствиеДатой",						СекундыВЧасыИМинутыСтрокой(СтрокаТаблицы.ОтсутствиеЧислом));
		СтруктураПараметров.Вставить("ОтпускБольничныйУвольнениеДатой",		СекундыВЧасыИМинутыСтрокой(СтрокаТаблицы.ОтпускБольничныйУвольнениеЧислом));
		СтруктураПараметров.Вставить("Баланс",								СекундыВЧасыИМинутыСтрокой(СтрокаТаблицы.БалансЧислом));
		
		
		ОбластьМакета.Параметры.Заполнить(СтруктураПараметров);
		ДокументРезультат.Вывести(ОбластьМакета);
		
	КонецЦикла; 
	
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция СформироватьДеревоДетали()
	
	СхемаКомпоновкиДанныхДетали = ПолучитьМакет("СхемаКомпоновкиДанныхДетали");
	
	
	КомпоновщикНастроекДетали = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекДетали.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанныхДетали));
	КомпоновщикНастроекДетали.ЗагрузитьНастройки(СхемаКомпоновкиДанныхДетали.НастройкиПоУмолчанию);
	
	СкопироватьНастройкиКомпоновщика(КомпоновщикНастроекДетали);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанныхДетали,КомпоновщикНастроекДетали.Настройки,,, 
	Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ДеревоЗначений = Новый ДеревоЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ПроцессорВывода.УстановитьОбъект(ДеревоЗначений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);   
	
	Возврат ДеревоЗначений;
	
КонецФункции // СформироватьДЕревоДетали()

Функция СформироватьТаблицуСумм()
	
	СхемаКомпоновкиДанныхДетали = ПолучитьМакет("СхемаКомпоновкиДанныхСуммы");
	
	КомпоновщикНастроекДетали = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекДетали.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанныхДетали));
	КомпоновщикНастроекДетали.ЗагрузитьНастройки(СхемаКомпоновкиДанныхДетали.НастройкиПоУмолчанию);
	
	СкопироватьНастройкиКомпоновщика(КомпоновщикНастроекДетали);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанныхДетали,КомпоновщикНастроекДетали.Настройки,,, 
	Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);   
	
	
	Возврат ТаблицаЗначений;
	
КонецФункции // СформироватьТаблицуСумм()

Функция СформироватьТаблицуШапки()

	СхемаКомпоновкиДанныхШапки = ПолучитьМакет("СхемаКомпоновкиДанныхШапки");
	
	
	КомпоновщикНастроекШапки = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекШапки.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанныхШапки));
	КомпоновщикНастроекШапки.ЗагрузитьНастройки(СхемаКомпоновкиДанныхШапки.НастройкиПоУмолчанию);
	
	СкопироватьНастройкиКомпоновщика(КомпоновщикНастроекШапки);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанныхШапки,КомпоновщикНастроекШапки.Настройки,,, 
	Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	ПроцессорВывода.УстановитьОбъект(ТаблицаЗначений);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);   
	
	Возврат ТаблицаЗначений;


КонецФункции // СформироватьТаблицуШапки()

Процедура СкопироватьНастройкиКомпоновщика(м_КомпоновщикНастроек)
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	Период = Настройки.ПараметрыДанных.Элементы[0].Значение;
	
	м_КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[0].Значение = Период.ДатаНачала;
	м_КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[1].Значение = Период.ДатаОкончания;
	м_КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[0].Использование = Истина;
	м_КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы[1].Использование = Истина;
	
	Для каждого ОтборИсточник Из Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ОтборИсточник) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			НовыйЭлементОтбора = м_КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ИначеЕсли ТипЗнч(ОтборИсточник) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")Тогда 
			НовыйЭлементОтбора = м_КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		Иначе
			Продолжить;
		КонецЕсли; 
		ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора,ОтборИсточник);
	КонецЦикла; 
	
КонецПроцедуры

Функция ПолучитьСтруктуруПериода()
	
	Настройки 	= КомпоновщикНастроек.ПолучитьНастройки();
	Период 		= Настройки.ПараметрыДанных.Элементы[0].Значение;
	
	Возврат Новый Структура("ДатаНачала,ДатаОкончания",Период.ДатаНачала,Период.ДатаОкончания);
	
КонецФункции // ПолучитьСтруктуруПериода()

Функция СекундыВЧасыИМинутыСтрокой(Знач КоличествоСекунд) 
	
	Если Не ТипЗнч(КоличествоСекунд) = Тип("Число") Тогда
		Возврат "00:00"
	КонецЕсли;
	
	Если КоличествоСекунд >= 0 Тогда
		Часы 			= Цел(КоличествоСекунд / 3600);
		Минуты  		= Цел((КоличествоСекунд - Часы * 3600) / 60);
		ДобавитьЗнак 	= Ложь;
	Иначе
		Часы 			= Цел(-КоличествоСекунд / 3600);
		Минуты  		= Цел((-КоличествоСекунд - Часы * 3600) / 60);
		ДобавитьЗнак 	= Истина;
	КонецЕсли; 
	
	ЗначениеСтрокой = СтрШаблон("%1:%2",ДобавитьСтроковыхНулей(Часы),ДобавитьСтроковыхНулей(Минуты));
	
	Если ДобавитьЗнак Тогда
		Возврат СтрШаблон("-%1",ЗначениеСтрокой);
	КонецЕсли; 
	
	Возврат ЗначениеСтрокой;
	 
КонецФункции // СекундыВДату()

Функция  ДобавитьСтроковыхНулей(ЗначениеСтрокой)
	
	ЗначениеСтрокой = Строка(ЗначениеСтрокой);
	
	Пока СтрДлина(ЗначениеСтрокой) < 2 Цикл
		ЗначениеСтрокой = СтрЗаменить("0%1","%1",ЗначениеСтрокой)	
	КонецЦикла; 
	
	Возврат ЗначениеСтрокой;
	
КонецФункции

Процедура ПроверкаВозможностиФормированияОтчета(СтруктураПериода)

	
	//1. В одном месяце даты должны лежать
	Если НачалоМесяца(СтруктураПериода.ДатаНачала) <> НачалоМесяца(СтруктураПериода.ДатаОкончания) Тогда
		ВызватьИсключение НСтр("ru = 'Дата начала и дата окончания в разных месяцах'");
	КонецЕсли;
	
	//2. Проверка существования расчета
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Месяц",НачалоМесяца(СтруктураПериода.ДатаНачала));
	Запрос.Текст = "ВЫБРАТЬ
	|	ЗаданияНаРасчетРабочегоВремени.Документ КАК Документ
	|ИЗ
	|	РегистрСведений.ЗаданияНаРасчетРабочегоВремени КАК ЗаданияНаРасчетРабочегоВремени
	|ГДЕ
	|	ЗаданияНаРасчетРабочегоВремени.Месяц = &Месяц
	|	И ЗаданияНаРасчетРабочегоВремени.ЗаданиеРасчета = Значение(Перечисление.ЗаданияРасчета.РасчетРабочегоВремени)
	|	И ЗаданияНаРасчетРабочегоВремени.Выполнен";
	
	Если Запрос.Выполнить().Пустой() Тогда
		ВызватьИсключение НСтр("ru = 'За выбранный период не найден расчет'");
	КонецЕсли;

КонецПроцедуры

#КонецОбласти
