////////////////////////////////////////////////////////////////////////////////
// <Заголовок модуля: краткое описание и условия применения модуля.>
//  
////////////////////////////////////////////////////////////////////////////////

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

Функция ИнициализироватьТаблицуЗначенийТаблицыОшибок() Экспорт
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	ТаблицаЗначений.Колонки.Добавить("ФИОСотрудника",Новый ОписаниеТипов("Строка", , ,Новый КвалификаторыСтроки(150)));
	ТаблицаЗначений.Колонки.Добавить("Сотрудник",	Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаЗначений.Колонки.Добавить("НеЗагружать",	Новый ОписаниеТипов("Булево"));
	ТаблицаЗначений.Колонки.Добавить("СоздатьНовый",Новый ОписаниеТипов("Булево"));
	
	Возврат ТаблицаЗначений;
	
КонецФункции // ИнициализироватьТаблицуЗначенийТаблицыОшибок()

Функция ИнициализироватьТаблицуЗначенийТаблицыЗагрузки() Экспорт

	ТаблицаЗначений = Новый ТаблицаЗначений;
	ТаблицаЗначений.Колонки.Добавить("Вход", 		Новый ОписаниеТипов("Дата"));
	ТаблицаЗначений.Колонки.Добавить("Выход", 		Новый ОписаниеТипов("Дата"));
	ТаблицаЗначений.Колонки.Добавить("Дата", 		Новый ОписаниеТипов("Дата"));
	ТаблицаЗначений.Колонки.Добавить("ДатаВыход", 	Новый ОписаниеТипов("Дата"));

	ТаблицаЗначений.Колонки.Добавить("Должность",		Новый ОписаниеТипов("Строка", , ,Новый КвалификаторыСтроки(100)));
	ТаблицаЗначений.Колонки.Добавить("Подразделение",	Новый ОписаниеТипов("Строка", , ,Новый КвалификаторыСтроки(100)));
	ТаблицаЗначений.Колонки.Добавить("Присутствие",		Новый ОписаниеТипов("Дата"));
	ТаблицаЗначений.Колонки.Добавить("Сотрудник",   	Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	ТаблицаЗначений.Колонки.Добавить("ТабельныйНомер",	Новый ОписаниеТипов("Строка", , ,Новый КвалификаторыСтроки(10)));
	ТаблицаЗначений.Колонки.Добавить("ФИОСотрудника", 	Новый ОписаниеТипов("Строка", , , Новый КвалификаторыСтроки(150)));

	Возврат ТаблицаЗначений;
	
КонецФункции // ИнициализироватьТаблицуЗначенийТаблицыОшибок()

#КонецОбласти


#Область СлужебныеПроцедурыИФункции
// Функция раскладывает переданный массив ссылок в соответствие по типам этих ссылок.
//
//	Параметры:
//		МассивСсылок - Массив Из ЛюбаяСсылка - массив ссылок на объекты информационной базы
//  Возвращаемое значение:
//		Соответствие - Соотвествие типов ссылкам.
//			Ключ - полное имя типа ссылки.
//	        Значение - Массив Из ЛюбаяСсылка - ссылок этого типа.
//
//@skip-check doc-comment-collection-item-type
Функция СоответствиеМассивовПоТипамОбъектов(МассивСсылок) Экспорт
	
	СоответствиеТипов = Новый Соответствие;
	
	Для Каждого Объект Из МассивСсылок Цикл
		
		ТипОбъекта = Объект.Метаданные().ПолноеИмя();
		ТекущийТипОбъекта = СоответствиеТипов.Получить(ТипОбъекта); // Массив - 
		
		Если ТекущийТипОбъекта = Неопределено Тогда
			СоответствиеТипов.Вставить(ТипОбъекта, Новый Массив);
			ТекущийТипОбъекта = СоответствиеТипов.Получить(ТипОбъекта);
		КонецЕсли;
		ТекущийТипОбъекта.Добавить(Объект);
		
	КонецЦикла;
	
	Возврат СоответствиеТипов;
	
КонецФункции

// Проверяет, умещаются ли переданные табличные документы на страницу при печати.
//
// Параметры:
//  ТабДокумент        - ТабличныйДокумент - табличный документ.
//  ВыводимыеОбласти   - Массив
//                     - ТабличныйДокумент - массив из проверяемых таблиц или табличный документ. 
//  РезультатПриОшибке - Булево - какой возвращать результат при возникновении ошибки.
//
// Возвращаемое значение:
//   Булево   - умещаются или нет переданные документы.
//
//@skip-check doc-comment-collection-item-type
Функция ПроверитьВыводТабличногоДокумента(ТабДокумент, ВыводимыеОбласти, РезультатПриОшибке = Истина) Экспорт

	Попытка
		Возврат ТабДокумент.ПроверитьВывод(ВыводимыеОбласти);
	Исключение
		Возврат РезультатПриОшибке;
	КонецПопытки;

КонецФункции 


#КонецОбласти

#КонецЕсли


